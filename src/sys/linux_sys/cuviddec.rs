use cudarc::driver::sys::*;
/* automatically generated by rust-bindgen 0.71.1 */

pub type CUvideodecoder = *mut ::core::ffi::c_void;
pub type CUvideoctxlock = *mut _CUcontextlock_st;
pub type CUVIDDECODECAPS = _CUVIDDECODECAPS;
pub type CUVIDDECODECREATEINFO = _CUVIDDECODECREATEINFO;
pub type CUVIDH264DPBENTRY = _CUVIDH264DPBENTRY;
pub type CUVIDH264MVCEXT = _CUVIDH264MVCEXT;
pub type CUVIDH264SVCEXT = _CUVIDH264SVCEXT;
pub type CUVIDH264PICPARAMS = _CUVIDH264PICPARAMS;
pub type CUVIDMPEG2PICPARAMS = _CUVIDMPEG2PICPARAMS;
pub type CUVIDMPEG4PICPARAMS = _CUVIDMPEG4PICPARAMS;
pub type CUVIDVC1PICPARAMS = _CUVIDVC1PICPARAMS;
pub type CUVIDJPEGPICPARAMS = _CUVIDJPEGPICPARAMS;
pub type CUVIDHEVCPICPARAMS = _CUVIDHEVCPICPARAMS;
pub type CUVIDVP8PICPARAMS = _CUVIDVP8PICPARAMS;
pub type CUVIDVP9PICPARAMS = _CUVIDVP9PICPARAMS;
pub type CUVIDAV1PICPARAMS = _CUVIDAV1PICPARAMS;
pub type CUVIDPICPARAMS = _CUVIDPICPARAMS;
pub type CUVIDPROCPARAMS = _CUVIDPROCPARAMS;
pub type CUVIDGETDECODESTATUS = _CUVIDGETDECODESTATUS;
pub type CUVIDRECONFIGUREDECODERINFO = _CUVIDRECONFIGUREDECODERINFO;
#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CUcontextlock_st {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDDECODECAPS {
    pub eCodecType: cudaVideoCodec,
    pub eChromaFormat: cudaVideoChromaFormat,
    pub nBitDepthMinus8: ::core::ffi::c_uint,
    pub reserved1: [::core::ffi::c_uint; 3usize],
    pub bIsSupported: ::core::ffi::c_uchar,
    pub nNumNVDECs: ::core::ffi::c_uchar,
    pub nOutputFormatMask: ::core::ffi::c_ushort,
    pub nMaxWidth: ::core::ffi::c_uint,
    pub nMaxHeight: ::core::ffi::c_uint,
    pub nMaxMBCount: ::core::ffi::c_uint,
    pub nMinWidth: ::core::ffi::c_ushort,
    pub nMinHeight: ::core::ffi::c_ushort,
    pub bIsHistogramSupported: ::core::ffi::c_uchar,
    pub nCounterBitDepth: ::core::ffi::c_uchar,
    pub nMaxHistogramBins: ::core::ffi::c_ushort,
    pub reserved3: [::core::ffi::c_uint; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDDECODECREATEINFO {
    pub ulWidth: ::core::ffi::c_ulong,
    pub ulHeight: ::core::ffi::c_ulong,
    pub ulNumDecodeSurfaces: ::core::ffi::c_ulong,
    pub CodecType: cudaVideoCodec,
    pub ChromaFormat: cudaVideoChromaFormat,
    pub ulCreationFlags: ::core::ffi::c_ulong,
    pub bitDepthMinus8: ::core::ffi::c_ulong,
    pub ulIntraDecodeOnly: ::core::ffi::c_ulong,
    pub ulMaxWidth: ::core::ffi::c_ulong,
    pub ulMaxHeight: ::core::ffi::c_ulong,
    pub Reserved1: ::core::ffi::c_ulong,
    pub display_area: _CUVIDDECODECREATEINFO__bindgen_ty_1,
    pub OutputFormat: cudaVideoSurfaceFormat,
    pub DeinterlaceMode: cudaVideoDeinterlaceMode,
    pub ulTargetWidth: ::core::ffi::c_ulong,
    pub ulTargetHeight: ::core::ffi::c_ulong,
    pub ulNumOutputSurfaces: ::core::ffi::c_ulong,
    pub vidLock: CUvideoctxlock,
    pub target_rect: _CUVIDDECODECREATEINFO__bindgen_ty_2,
    pub enableHistogram: ::core::ffi::c_ulong,
    pub Reserved2: [::core::ffi::c_ulong; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDDECODECREATEINFO__bindgen_ty_1 {
    pub left: ::core::ffi::c_short,
    pub top: ::core::ffi::c_short,
    pub right: ::core::ffi::c_short,
    pub bottom: ::core::ffi::c_short,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDDECODECREATEINFO__bindgen_ty_2 {
    pub left: ::core::ffi::c_short,
    pub top: ::core::ffi::c_short,
    pub right: ::core::ffi::c_short,
    pub bottom: ::core::ffi::c_short,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDH264DPBENTRY {
    pub PicIdx: ::core::ffi::c_int,
    pub FrameIdx: ::core::ffi::c_int,
    pub is_long_term: ::core::ffi::c_int,
    pub not_existing: ::core::ffi::c_int,
    pub used_for_reference: ::core::ffi::c_int,
    pub FieldOrderCnt: [::core::ffi::c_int; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDH264MVCEXT {
    pub num_views_minus1: ::core::ffi::c_int,
    pub view_id: ::core::ffi::c_int,
    pub inter_view_flag: ::core::ffi::c_uchar,
    pub num_inter_view_refs_l0: ::core::ffi::c_uchar,
    pub num_inter_view_refs_l1: ::core::ffi::c_uchar,
    pub MVCReserved8Bits: ::core::ffi::c_uchar,
    pub InterViewRefsL0: [::core::ffi::c_int; 16usize],
    pub InterViewRefsL1: [::core::ffi::c_int; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDH264SVCEXT {
    pub profile_idc: ::core::ffi::c_uchar,
    pub level_idc: ::core::ffi::c_uchar,
    pub DQId: ::core::ffi::c_uchar,
    pub DQIdMax: ::core::ffi::c_uchar,
    pub disable_inter_layer_deblocking_filter_idc: ::core::ffi::c_uchar,
    pub ref_layer_chroma_phase_y_plus1: ::core::ffi::c_uchar,
    pub inter_layer_slice_alpha_c0_offset_div2: ::core::ffi::c_schar,
    pub inter_layer_slice_beta_offset_div2: ::core::ffi::c_schar,
    pub DPBEntryValidFlag: ::core::ffi::c_ushort,
    pub inter_layer_deblocking_filter_control_present_flag: ::core::ffi::c_uchar,
    pub extended_spatial_scalability_idc: ::core::ffi::c_uchar,
    pub adaptive_tcoeff_level_prediction_flag: ::core::ffi::c_uchar,
    pub slice_header_restriction_flag: ::core::ffi::c_uchar,
    pub chroma_phase_x_plus1_flag: ::core::ffi::c_uchar,
    pub chroma_phase_y_plus1: ::core::ffi::c_uchar,
    pub tcoeff_level_prediction_flag: ::core::ffi::c_uchar,
    pub constrained_intra_resampling_flag: ::core::ffi::c_uchar,
    pub ref_layer_chroma_phase_x_plus1_flag: ::core::ffi::c_uchar,
    pub store_ref_base_pic_flag: ::core::ffi::c_uchar,
    pub Reserved8BitsA: ::core::ffi::c_uchar,
    pub Reserved8BitsB: ::core::ffi::c_uchar,
    pub scaled_ref_layer_left_offset: ::core::ffi::c_short,
    pub scaled_ref_layer_top_offset: ::core::ffi::c_short,
    pub scaled_ref_layer_right_offset: ::core::ffi::c_short,
    pub scaled_ref_layer_bottom_offset: ::core::ffi::c_short,
    pub Reserved16Bits: ::core::ffi::c_ushort,
    pub pNextLayer: *mut _CUVIDPICPARAMS,
    pub bRefBaseLayer: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CUVIDH264PICPARAMS {
    pub log2_max_frame_num_minus4: ::core::ffi::c_int,
    pub pic_order_cnt_type: ::core::ffi::c_int,
    pub log2_max_pic_order_cnt_lsb_minus4: ::core::ffi::c_int,
    pub delta_pic_order_always_zero_flag: ::core::ffi::c_int,
    pub frame_mbs_only_flag: ::core::ffi::c_int,
    pub direct_8x8_inference_flag: ::core::ffi::c_int,
    pub num_ref_frames: ::core::ffi::c_int,
    pub residual_colour_transform_flag: ::core::ffi::c_uchar,
    pub bit_depth_luma_minus8: ::core::ffi::c_uchar,
    pub bit_depth_chroma_minus8: ::core::ffi::c_uchar,
    pub qpprime_y_zero_transform_bypass_flag: ::core::ffi::c_uchar,
    pub entropy_coding_mode_flag: ::core::ffi::c_int,
    pub pic_order_present_flag: ::core::ffi::c_int,
    pub num_ref_idx_l0_active_minus1: ::core::ffi::c_int,
    pub num_ref_idx_l1_active_minus1: ::core::ffi::c_int,
    pub weighted_pred_flag: ::core::ffi::c_int,
    pub weighted_bipred_idc: ::core::ffi::c_int,
    pub pic_init_qp_minus26: ::core::ffi::c_int,
    pub deblocking_filter_control_present_flag: ::core::ffi::c_int,
    pub redundant_pic_cnt_present_flag: ::core::ffi::c_int,
    pub transform_8x8_mode_flag: ::core::ffi::c_int,
    pub MbaffFrameFlag: ::core::ffi::c_int,
    pub constrained_intra_pred_flag: ::core::ffi::c_int,
    pub chroma_qp_index_offset: ::core::ffi::c_int,
    pub second_chroma_qp_index_offset: ::core::ffi::c_int,
    pub ref_pic_flag: ::core::ffi::c_int,
    pub frame_num: ::core::ffi::c_int,
    pub CurrFieldOrderCnt: [::core::ffi::c_int; 2usize],
    pub dpb: [CUVIDH264DPBENTRY; 16usize],
    pub WeightScale4x4: [[::core::ffi::c_uchar; 16usize]; 6usize],
    pub WeightScale8x8: [[::core::ffi::c_uchar; 64usize]; 2usize],
    pub fmo_aso_enable: ::core::ffi::c_uchar,
    pub num_slice_groups_minus1: ::core::ffi::c_uchar,
    pub slice_group_map_type: ::core::ffi::c_uchar,
    pub pic_init_qs_minus26: ::core::ffi::c_schar,
    pub slice_group_change_rate_minus1: ::core::ffi::c_uint,
    pub fmo: _CUVIDH264PICPARAMS__bindgen_ty_1,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub Reserved: [::core::ffi::c_uint; 11usize],
    pub __bindgen_anon_1: _CUVIDH264PICPARAMS__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDMPEG2PICPARAMS {
    pub ForwardRefIdx: ::core::ffi::c_int,
    pub BackwardRefIdx: ::core::ffi::c_int,
    pub picture_coding_type: ::core::ffi::c_int,
    pub full_pel_forward_vector: ::core::ffi::c_int,
    pub full_pel_backward_vector: ::core::ffi::c_int,
    pub f_code: [[::core::ffi::c_int; 2usize]; 2usize],
    pub intra_dc_precision: ::core::ffi::c_int,
    pub frame_pred_frame_dct: ::core::ffi::c_int,
    pub concealment_motion_vectors: ::core::ffi::c_int,
    pub q_scale_type: ::core::ffi::c_int,
    pub intra_vlc_format: ::core::ffi::c_int,
    pub alternate_scan: ::core::ffi::c_int,
    pub top_field_first: ::core::ffi::c_int,
    pub QuantMatrixIntra: [::core::ffi::c_uchar; 64usize],
    pub QuantMatrixInter: [::core::ffi::c_uchar; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDMPEG4PICPARAMS {
    pub ForwardRefIdx: ::core::ffi::c_int,
    pub BackwardRefIdx: ::core::ffi::c_int,
    pub video_object_layer_width: ::core::ffi::c_int,
    pub video_object_layer_height: ::core::ffi::c_int,
    pub vop_time_increment_bitcount: ::core::ffi::c_int,
    pub top_field_first: ::core::ffi::c_int,
    pub resync_marker_disable: ::core::ffi::c_int,
    pub quant_type: ::core::ffi::c_int,
    pub quarter_sample: ::core::ffi::c_int,
    pub short_video_header: ::core::ffi::c_int,
    pub divx_flags: ::core::ffi::c_int,
    pub vop_coding_type: ::core::ffi::c_int,
    pub vop_coded: ::core::ffi::c_int,
    pub vop_rounding_type: ::core::ffi::c_int,
    pub alternate_vertical_scan_flag: ::core::ffi::c_int,
    pub interlaced: ::core::ffi::c_int,
    pub vop_fcode_forward: ::core::ffi::c_int,
    pub vop_fcode_backward: ::core::ffi::c_int,
    pub trd: [::core::ffi::c_int; 2usize],
    pub trb: [::core::ffi::c_int; 2usize],
    pub QuantMatrixIntra: [::core::ffi::c_uchar; 64usize],
    pub QuantMatrixInter: [::core::ffi::c_uchar; 64usize],
    pub gmc_enabled: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDVC1PICPARAMS {
    pub ForwardRefIdx: ::core::ffi::c_int,
    pub BackwardRefIdx: ::core::ffi::c_int,
    pub FrameWidth: ::core::ffi::c_int,
    pub FrameHeight: ::core::ffi::c_int,
    pub intra_pic_flag: ::core::ffi::c_int,
    pub ref_pic_flag: ::core::ffi::c_int,
    pub progressive_fcm: ::core::ffi::c_int,
    pub profile: ::core::ffi::c_int,
    pub postprocflag: ::core::ffi::c_int,
    pub pulldown: ::core::ffi::c_int,
    pub interlace: ::core::ffi::c_int,
    pub tfcntrflag: ::core::ffi::c_int,
    pub finterpflag: ::core::ffi::c_int,
    pub psf: ::core::ffi::c_int,
    pub multires: ::core::ffi::c_int,
    pub syncmarker: ::core::ffi::c_int,
    pub rangered: ::core::ffi::c_int,
    pub maxbframes: ::core::ffi::c_int,
    pub panscan_flag: ::core::ffi::c_int,
    pub refdist_flag: ::core::ffi::c_int,
    pub extended_mv: ::core::ffi::c_int,
    pub dquant: ::core::ffi::c_int,
    pub vstransform: ::core::ffi::c_int,
    pub loopfilter: ::core::ffi::c_int,
    pub fastuvmc: ::core::ffi::c_int,
    pub overlap: ::core::ffi::c_int,
    pub quantizer: ::core::ffi::c_int,
    pub extended_dmv: ::core::ffi::c_int,
    pub range_mapy_flag: ::core::ffi::c_int,
    pub range_mapy: ::core::ffi::c_int,
    pub range_mapuv_flag: ::core::ffi::c_int,
    pub range_mapuv: ::core::ffi::c_int,
    pub rangeredfrm: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDJPEGPICPARAMS {
    pub numComponents: ::core::ffi::c_uchar,
    pub bitDepth: ::core::ffi::c_uchar,
    pub quantizationTableSelector: [::core::ffi::c_uchar; 4usize],
    pub scanOffset: [::core::ffi::c_uint; 4usize],
    pub scanSize: [::core::ffi::c_uint; 4usize],
    pub restartInterval: ::core::ffi::c_ushort,
    pub componentIdentifier: [::core::ffi::c_uchar; 4usize],
    pub hasQMatrix: ::core::ffi::c_uchar,
    pub hasHuffman: ::core::ffi::c_uchar,
    pub quantvals: [[::core::ffi::c_ushort; 64usize]; 4usize],
    pub bits_ac: [[::core::ffi::c_uchar; 16usize]; 4usize],
    pub table_ac: [[::core::ffi::c_uchar; 256usize]; 4usize],
    pub bits_dc: [[::core::ffi::c_uchar; 16usize]; 4usize],
    pub table_dc: [[::core::ffi::c_uchar; 256usize]; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDHEVCPICPARAMS {
    pub pic_width_in_luma_samples: ::core::ffi::c_int,
    pub pic_height_in_luma_samples: ::core::ffi::c_int,
    pub log2_min_luma_coding_block_size_minus3: ::core::ffi::c_uchar,
    pub log2_diff_max_min_luma_coding_block_size: ::core::ffi::c_uchar,
    pub log2_min_transform_block_size_minus2: ::core::ffi::c_uchar,
    pub log2_diff_max_min_transform_block_size: ::core::ffi::c_uchar,
    pub pcm_enabled_flag: ::core::ffi::c_uchar,
    pub log2_min_pcm_luma_coding_block_size_minus3: ::core::ffi::c_uchar,
    pub log2_diff_max_min_pcm_luma_coding_block_size: ::core::ffi::c_uchar,
    pub pcm_sample_bit_depth_luma_minus1: ::core::ffi::c_uchar,
    pub pcm_sample_bit_depth_chroma_minus1: ::core::ffi::c_uchar,
    pub pcm_loop_filter_disabled_flag: ::core::ffi::c_uchar,
    pub strong_intra_smoothing_enabled_flag: ::core::ffi::c_uchar,
    pub max_transform_hierarchy_depth_intra: ::core::ffi::c_uchar,
    pub max_transform_hierarchy_depth_inter: ::core::ffi::c_uchar,
    pub amp_enabled_flag: ::core::ffi::c_uchar,
    pub separate_colour_plane_flag: ::core::ffi::c_uchar,
    pub log2_max_pic_order_cnt_lsb_minus4: ::core::ffi::c_uchar,
    pub num_short_term_ref_pic_sets: ::core::ffi::c_uchar,
    pub long_term_ref_pics_present_flag: ::core::ffi::c_uchar,
    pub num_long_term_ref_pics_sps: ::core::ffi::c_uchar,
    pub sps_temporal_mvp_enabled_flag: ::core::ffi::c_uchar,
    pub sample_adaptive_offset_enabled_flag: ::core::ffi::c_uchar,
    pub scaling_list_enable_flag: ::core::ffi::c_uchar,
    pub IrapPicFlag: ::core::ffi::c_uchar,
    pub IdrPicFlag: ::core::ffi::c_uchar,
    pub bit_depth_luma_minus8: ::core::ffi::c_uchar,
    pub bit_depth_chroma_minus8: ::core::ffi::c_uchar,
    pub log2_max_transform_skip_block_size_minus2: ::core::ffi::c_uchar,
    pub log2_sao_offset_scale_luma: ::core::ffi::c_uchar,
    pub log2_sao_offset_scale_chroma: ::core::ffi::c_uchar,
    pub high_precision_offsets_enabled_flag: ::core::ffi::c_uchar,
    pub reserved1: [::core::ffi::c_uchar; 10usize],
    pub dependent_slice_segments_enabled_flag: ::core::ffi::c_uchar,
    pub slice_segment_header_extension_present_flag: ::core::ffi::c_uchar,
    pub sign_data_hiding_enabled_flag: ::core::ffi::c_uchar,
    pub cu_qp_delta_enabled_flag: ::core::ffi::c_uchar,
    pub diff_cu_qp_delta_depth: ::core::ffi::c_uchar,
    pub init_qp_minus26: ::core::ffi::c_schar,
    pub pps_cb_qp_offset: ::core::ffi::c_schar,
    pub pps_cr_qp_offset: ::core::ffi::c_schar,
    pub constrained_intra_pred_flag: ::core::ffi::c_uchar,
    pub weighted_pred_flag: ::core::ffi::c_uchar,
    pub weighted_bipred_flag: ::core::ffi::c_uchar,
    pub transform_skip_enabled_flag: ::core::ffi::c_uchar,
    pub transquant_bypass_enabled_flag: ::core::ffi::c_uchar,
    pub entropy_coding_sync_enabled_flag: ::core::ffi::c_uchar,
    pub log2_parallel_merge_level_minus2: ::core::ffi::c_uchar,
    pub num_extra_slice_header_bits: ::core::ffi::c_uchar,
    pub loop_filter_across_tiles_enabled_flag: ::core::ffi::c_uchar,
    pub loop_filter_across_slices_enabled_flag: ::core::ffi::c_uchar,
    pub output_flag_present_flag: ::core::ffi::c_uchar,
    pub num_ref_idx_l0_default_active_minus1: ::core::ffi::c_uchar,
    pub num_ref_idx_l1_default_active_minus1: ::core::ffi::c_uchar,
    pub lists_modification_present_flag: ::core::ffi::c_uchar,
    pub cabac_init_present_flag: ::core::ffi::c_uchar,
    pub pps_slice_chroma_qp_offsets_present_flag: ::core::ffi::c_uchar,
    pub deblocking_filter_override_enabled_flag: ::core::ffi::c_uchar,
    pub pps_deblocking_filter_disabled_flag: ::core::ffi::c_uchar,
    pub pps_beta_offset_div2: ::core::ffi::c_schar,
    pub pps_tc_offset_div2: ::core::ffi::c_schar,
    pub tiles_enabled_flag: ::core::ffi::c_uchar,
    pub uniform_spacing_flag: ::core::ffi::c_uchar,
    pub num_tile_columns_minus1: ::core::ffi::c_uchar,
    pub num_tile_rows_minus1: ::core::ffi::c_uchar,
    pub column_width_minus1: [::core::ffi::c_ushort; 21usize],
    pub row_height_minus1: [::core::ffi::c_ushort; 21usize],
    pub sps_range_extension_flag: ::core::ffi::c_uchar,
    pub transform_skip_rotation_enabled_flag: ::core::ffi::c_uchar,
    pub transform_skip_context_enabled_flag: ::core::ffi::c_uchar,
    pub implicit_rdpcm_enabled_flag: ::core::ffi::c_uchar,
    pub explicit_rdpcm_enabled_flag: ::core::ffi::c_uchar,
    pub extended_precision_processing_flag: ::core::ffi::c_uchar,
    pub intra_smoothing_disabled_flag: ::core::ffi::c_uchar,
    pub persistent_rice_adaptation_enabled_flag: ::core::ffi::c_uchar,
    pub cabac_bypass_alignment_enabled_flag: ::core::ffi::c_uchar,
    pub pps_range_extension_flag: ::core::ffi::c_uchar,
    pub cross_component_prediction_enabled_flag: ::core::ffi::c_uchar,
    pub chroma_qp_offset_list_enabled_flag: ::core::ffi::c_uchar,
    pub diff_cu_chroma_qp_offset_depth: ::core::ffi::c_uchar,
    pub chroma_qp_offset_list_len_minus1: ::core::ffi::c_uchar,
    pub cb_qp_offset_list: [::core::ffi::c_schar; 6usize],
    pub cr_qp_offset_list: [::core::ffi::c_schar; 6usize],
    pub reserved2: [::core::ffi::c_uchar; 2usize],
    pub reserved3: [::core::ffi::c_uint; 8usize],
    pub NumBitsForShortTermRPSInSlice: ::core::ffi::c_int,
    pub NumDeltaPocsOfRefRpsIdx: ::core::ffi::c_int,
    pub NumPocTotalCurr: ::core::ffi::c_int,
    pub NumPocStCurrBefore: ::core::ffi::c_int,
    pub NumPocStCurrAfter: ::core::ffi::c_int,
    pub NumPocLtCurr: ::core::ffi::c_int,
    pub CurrPicOrderCntVal: ::core::ffi::c_int,
    pub RefPicIdx: [::core::ffi::c_int; 16usize],
    pub PicOrderCntVal: [::core::ffi::c_int; 16usize],
    pub IsLongTerm: [::core::ffi::c_uchar; 16usize],
    pub RefPicSetStCurrBefore: [::core::ffi::c_uchar; 8usize],
    pub RefPicSetStCurrAfter: [::core::ffi::c_uchar; 8usize],
    pub RefPicSetLtCurr: [::core::ffi::c_uchar; 8usize],
    pub RefPicSetInterLayer0: [::core::ffi::c_uchar; 8usize],
    pub RefPicSetInterLayer1: [::core::ffi::c_uchar; 8usize],
    pub reserved4: [::core::ffi::c_uint; 12usize],
    pub ScalingList4x4: [[::core::ffi::c_uchar; 16usize]; 6usize],
    pub ScalingList8x8: [[::core::ffi::c_uchar; 64usize]; 6usize],
    pub ScalingList16x16: [[::core::ffi::c_uchar; 64usize]; 6usize],
    pub ScalingList32x32: [[::core::ffi::c_uchar; 64usize]; 2usize],
    pub ScalingListDCCoeff16x16: [::core::ffi::c_uchar; 6usize],
    pub ScalingListDCCoeff32x32: [::core::ffi::c_uchar; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CUVIDVP8PICPARAMS {
    pub width: ::core::ffi::c_int,
    pub height: ::core::ffi::c_int,
    pub first_partition_size: ::core::ffi::c_uint,
    pub LastRefIdx: ::core::ffi::c_uchar,
    pub GoldenRefIdx: ::core::ffi::c_uchar,
    pub AltRefIdx: ::core::ffi::c_uchar,
    pub __bindgen_anon_1: _CUVIDVP8PICPARAMS__bindgen_ty_1,
    pub Reserved1: [::core::ffi::c_uchar; 4usize],
    pub Reserved2: [::core::ffi::c_uint; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDVP8PICPARAMS__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDVP9PICPARAMS {
    pub width: ::core::ffi::c_uint,
    pub height: ::core::ffi::c_uint,
    pub LastRefIdx: ::core::ffi::c_uchar,
    pub GoldenRefIdx: ::core::ffi::c_uchar,
    pub AltRefIdx: ::core::ffi::c_uchar,
    pub colorSpace: ::core::ffi::c_uchar,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub reserved16Bits: ::core::ffi::c_ushort,
    pub refFrameSignBias: [::core::ffi::c_uchar; 4usize],
    pub bitDepthMinus8Luma: ::core::ffi::c_uchar,
    pub bitDepthMinus8Chroma: ::core::ffi::c_uchar,
    pub loopFilterLevel: ::core::ffi::c_uchar,
    pub loopFilterSharpness: ::core::ffi::c_uchar,
    pub modeRefLfEnabled: ::core::ffi::c_uchar,
    pub log2_tile_columns: ::core::ffi::c_uchar,
    pub log2_tile_rows: ::core::ffi::c_uchar,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub segmentFeatureEnable: [[::core::ffi::c_uchar; 4usize]; 8usize],
    pub segmentFeatureData: [[::core::ffi::c_short; 4usize]; 8usize],
    pub mb_segment_tree_probs: [::core::ffi::c_uchar; 7usize],
    pub segment_pred_probs: [::core::ffi::c_uchar; 3usize],
    pub reservedSegment16Bits: [::core::ffi::c_uchar; 2usize],
    pub qpYAc: ::core::ffi::c_int,
    pub qpYDc: ::core::ffi::c_int,
    pub qpChDc: ::core::ffi::c_int,
    pub qpChAc: ::core::ffi::c_int,
    pub activeRefIdx: [::core::ffi::c_uint; 3usize],
    pub resetFrameContext: ::core::ffi::c_uint,
    pub mcomp_filter_type: ::core::ffi::c_uint,
    pub mbRefLfDelta: [::core::ffi::c_uint; 4usize],
    pub mbModeLfDelta: [::core::ffi::c_uint; 2usize],
    pub frameTagSize: ::core::ffi::c_uint,
    pub offsetToDctParts: ::core::ffi::c_uint,
    pub reserved128Bits: [::core::ffi::c_uint; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDAV1PICPARAMS {
    pub width: ::core::ffi::c_uint,
    pub height: ::core::ffi::c_uint,
    pub frame_offset: ::core::ffi::c_uint,
    pub decodePicIdx: ::core::ffi::c_int,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 12usize]>,
    pub tile_widths: [::core::ffi::c_ushort; 64usize],
    pub tile_heights: [::core::ffi::c_ushort; 64usize],
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub cdef_y_strength: [::core::ffi::c_uchar; 8usize],
    pub cdef_uv_strength: [::core::ffi::c_uchar; 8usize],
    pub _bitfield_align_3: [u8; 0],
    pub _bitfield_3: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub base_qindex: ::core::ffi::c_uchar,
    pub qp_y_dc_delta_q: ::core::ffi::c_char,
    pub qp_u_dc_delta_q: ::core::ffi::c_char,
    pub qp_v_dc_delta_q: ::core::ffi::c_char,
    pub qp_u_ac_delta_q: ::core::ffi::c_char,
    pub qp_v_ac_delta_q: ::core::ffi::c_char,
    pub qm_y: ::core::ffi::c_uchar,
    pub qm_u: ::core::ffi::c_uchar,
    pub qm_v: ::core::ffi::c_uchar,
    pub _bitfield_align_4: [u8; 0],
    pub _bitfield_4: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub segmentation_feature_data: [[::core::ffi::c_short; 8usize]; 8usize],
    pub segmentation_feature_mask: [::core::ffi::c_uchar; 8usize],
    pub loop_filter_level: [::core::ffi::c_uchar; 2usize],
    pub loop_filter_level_u: ::core::ffi::c_uchar,
    pub loop_filter_level_v: ::core::ffi::c_uchar,
    pub loop_filter_sharpness: ::core::ffi::c_uchar,
    pub loop_filter_ref_deltas: [::core::ffi::c_char; 8usize],
    pub loop_filter_mode_deltas: [::core::ffi::c_char; 2usize],
    pub _bitfield_align_5: [u8; 0],
    pub _bitfield_5: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub lr_unit_size: [::core::ffi::c_uchar; 3usize],
    pub lr_type: [::core::ffi::c_uchar; 3usize],
    pub primary_ref_frame: ::core::ffi::c_uchar,
    pub ref_frame_map: [::core::ffi::c_uchar; 8usize],
    pub _bitfield_align_6: [u8; 0],
    pub _bitfield_6: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub reserved5_32bits: [::core::ffi::c_uchar; 4usize],
    pub ref_frame: [_CUVIDAV1PICPARAMS__bindgen_ty_1; 7usize],
    pub global_motion: [_CUVIDAV1PICPARAMS__bindgen_ty_2; 7usize],
    pub _bitfield_align_7: [u8; 0],
    pub _bitfield_7: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub num_y_points: ::core::ffi::c_uchar,
    pub scaling_points_y: [[::core::ffi::c_uchar; 2usize]; 14usize],
    pub num_cb_points: ::core::ffi::c_uchar,
    pub scaling_points_cb: [[::core::ffi::c_uchar; 2usize]; 10usize],
    pub num_cr_points: ::core::ffi::c_uchar,
    pub scaling_points_cr: [[::core::ffi::c_uchar; 2usize]; 10usize],
    pub reserved7_8bits: ::core::ffi::c_uchar,
    pub random_seed: ::core::ffi::c_ushort,
    pub ar_coeffs_y: [::core::ffi::c_short; 24usize],
    pub ar_coeffs_cb: [::core::ffi::c_short; 25usize],
    pub ar_coeffs_cr: [::core::ffi::c_short; 25usize],
    pub cb_mult: ::core::ffi::c_uchar,
    pub cb_luma_mult: ::core::ffi::c_uchar,
    pub cb_offset: ::core::ffi::c_short,
    pub cr_mult: ::core::ffi::c_uchar,
    pub cr_luma_mult: ::core::ffi::c_uchar,
    pub cr_offset: ::core::ffi::c_short,
    pub reserved: [::core::ffi::c_int; 7usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDAV1PICPARAMS__bindgen_ty_1 {
    pub width: ::core::ffi::c_uint,
    pub height: ::core::ffi::c_uint,
    pub index: ::core::ffi::c_uchar,
    pub reserved24Bits: [::core::ffi::c_uchar; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDAV1PICPARAMS__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub reserved24Bits: [::core::ffi::c_char; 3usize],
    pub wmmat: [::core::ffi::c_int; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CUVIDPICPARAMS {
    pub PicWidthInMbs: ::core::ffi::c_int,
    pub FrameHeightInMbs: ::core::ffi::c_int,
    pub CurrPicIdx: ::core::ffi::c_int,
    pub field_pic_flag: ::core::ffi::c_int,
    pub bottom_field_flag: ::core::ffi::c_int,
    pub second_field: ::core::ffi::c_int,
    pub nBitstreamDataLen: ::core::ffi::c_uint,
    pub pBitstreamData: *const ::core::ffi::c_uchar,
    pub nNumSlices: ::core::ffi::c_uint,
    pub pSliceDataOffsets: *const ::core::ffi::c_uint,
    pub ref_pic_flag: ::core::ffi::c_int,
    pub intra_pic_flag: ::core::ffi::c_int,
    pub Reserved: [::core::ffi::c_uint; 30usize],
    pub CodecSpecific: _CUVIDPICPARAMS__bindgen_ty_1,
}
#[repr(C)]
pub struct _CUVIDPROCPARAMS {
    pub progressive_frame: ::core::ffi::c_int,
    pub second_field: ::core::ffi::c_int,
    pub top_field_first: ::core::ffi::c_int,
    pub unpaired_field: ::core::ffi::c_int,
    pub reserved_flags: ::core::ffi::c_uint,
    pub reserved_zero: ::core::ffi::c_uint,
    pub raw_input_dptr: ::core::ffi::c_ulonglong,
    pub raw_input_pitch: ::core::ffi::c_uint,
    pub raw_input_format: ::core::ffi::c_uint,
    pub raw_output_dptr: ::core::ffi::c_ulonglong,
    pub raw_output_pitch: ::core::ffi::c_uint,
    pub Reserved1: ::core::ffi::c_uint,
    pub output_stream: CUstream,
    pub Reserved: [::core::ffi::c_uint; 46usize],
    pub histogram_dptr: *mut ::core::ffi::c_ulonglong,
    pub Reserved2: [*mut ::core::ffi::c_void; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDGETDECODESTATUS {
    pub decodeStatus: cuvidDecodeStatus,
    pub reserved: [::core::ffi::c_uint; 31usize],
    pub pReserved: [*mut ::core::ffi::c_void; 8usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDRECONFIGUREDECODERINFO {
    pub ulWidth: ::core::ffi::c_uint,
    pub ulHeight: ::core::ffi::c_uint,
    pub ulTargetWidth: ::core::ffi::c_uint,
    pub ulTargetHeight: ::core::ffi::c_uint,
    pub ulNumDecodeSurfaces: ::core::ffi::c_uint,
    pub reserved1: [::core::ffi::c_uint; 12usize],
    pub display_area: _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1,
    pub target_rect: _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2,
    pub reserved2: [::core::ffi::c_uint; 11usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1 {
    pub left: ::core::ffi::c_short,
    pub top: ::core::ffi::c_short,
    pub right: ::core::ffi::c_short,
    pub bottom: ::core::ffi::c_short,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2 {
    pub left: ::core::ffi::c_short,
    pub top: ::core::ffi::c_short,
    pub right: ::core::ffi::c_short,
    pub bottom: ::core::ffi::c_short,
}
pub const I_VOP: u32 = 0;
pub const P_VOP: u32 = 1;
pub const B_VOP: u32 = 2;
pub const S_VOP: u32 = 3;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDDECODECAPS"][::core::mem::size_of::<_CUVIDDECODECAPS>() - 88usize];
    ["Alignment of _CUVIDDECODECAPS"][::core::mem::align_of::<_CUVIDDECODECAPS>() - 4usize];
    ["Offset of field: _CUVIDDECODECAPS::eCodecType"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, eCodecType) - 0usize];
    ["Offset of field: _CUVIDDECODECAPS::eChromaFormat"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, eChromaFormat) - 4usize];
    ["Offset of field: _CUVIDDECODECAPS::nBitDepthMinus8"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, nBitDepthMinus8) - 8usize];
    ["Offset of field: _CUVIDDECODECAPS::reserved1"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, reserved1) - 12usize];
    ["Offset of field: _CUVIDDECODECAPS::bIsSupported"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, bIsSupported) - 24usize];
    ["Offset of field: _CUVIDDECODECAPS::nNumNVDECs"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, nNumNVDECs) - 25usize];
    ["Offset of field: _CUVIDDECODECAPS::nOutputFormatMask"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, nOutputFormatMask) - 26usize];
    ["Offset of field: _CUVIDDECODECAPS::nMaxWidth"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, nMaxWidth) - 28usize];
    ["Offset of field: _CUVIDDECODECAPS::nMaxHeight"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, nMaxHeight) - 32usize];
    ["Offset of field: _CUVIDDECODECAPS::nMaxMBCount"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, nMaxMBCount) - 36usize];
    ["Offset of field: _CUVIDDECODECAPS::nMinWidth"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, nMinWidth) - 40usize];
    ["Offset of field: _CUVIDDECODECAPS::nMinHeight"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, nMinHeight) - 42usize];
    ["Offset of field: _CUVIDDECODECAPS::bIsHistogramSupported"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, bIsHistogramSupported) - 44usize];
    ["Offset of field: _CUVIDDECODECAPS::nCounterBitDepth"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, nCounterBitDepth) - 45usize];
    ["Offset of field: _CUVIDDECODECAPS::nMaxHistogramBins"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, nMaxHistogramBins) - 46usize];
    ["Offset of field: _CUVIDDECODECAPS::reserved3"]
        [::core::mem::offset_of!(_CUVIDDECODECAPS, reserved3) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDDECODECREATEINFO__bindgen_ty_1"]
        [::core::mem::size_of::<_CUVIDDECODECREATEINFO__bindgen_ty_1>() - 8usize];
    ["Alignment of _CUVIDDECODECREATEINFO__bindgen_ty_1"]
        [::core::mem::align_of::<_CUVIDDECODECREATEINFO__bindgen_ty_1>() - 2usize];
    ["Offset of field: _CUVIDDECODECREATEINFO__bindgen_ty_1::left"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO__bindgen_ty_1, left) - 0usize];
    ["Offset of field: _CUVIDDECODECREATEINFO__bindgen_ty_1::top"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO__bindgen_ty_1, top) - 2usize];
    ["Offset of field: _CUVIDDECODECREATEINFO__bindgen_ty_1::right"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO__bindgen_ty_1, right) - 4usize];
    ["Offset of field: _CUVIDDECODECREATEINFO__bindgen_ty_1::bottom"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO__bindgen_ty_1, bottom) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDDECODECREATEINFO__bindgen_ty_2"]
        [::core::mem::size_of::<_CUVIDDECODECREATEINFO__bindgen_ty_2>() - 8usize];
    ["Alignment of _CUVIDDECODECREATEINFO__bindgen_ty_2"]
        [::core::mem::align_of::<_CUVIDDECODECREATEINFO__bindgen_ty_2>() - 2usize];
    ["Offset of field: _CUVIDDECODECREATEINFO__bindgen_ty_2::left"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO__bindgen_ty_2, left) - 0usize];
    ["Offset of field: _CUVIDDECODECREATEINFO__bindgen_ty_2::top"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO__bindgen_ty_2, top) - 2usize];
    ["Offset of field: _CUVIDDECODECREATEINFO__bindgen_ty_2::right"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO__bindgen_ty_2, right) - 4usize];
    ["Offset of field: _CUVIDDECODECREATEINFO__bindgen_ty_2::bottom"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO__bindgen_ty_2, bottom) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDDECODECREATEINFO"][::core::mem::size_of::<_CUVIDDECODECREATEINFO>() - 176usize];
    ["Alignment of _CUVIDDECODECREATEINFO"]
        [::core::mem::align_of::<_CUVIDDECODECREATEINFO>() - 8usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::ulWidth"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, ulWidth) - 0usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::ulHeight"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, ulHeight) - 8usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::ulNumDecodeSurfaces"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, ulNumDecodeSurfaces) - 16usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::CodecType"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, CodecType) - 24usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::ChromaFormat"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, ChromaFormat) - 28usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::ulCreationFlags"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, ulCreationFlags) - 32usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::bitDepthMinus8"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, bitDepthMinus8) - 40usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::ulIntraDecodeOnly"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, ulIntraDecodeOnly) - 48usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::ulMaxWidth"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, ulMaxWidth) - 56usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::ulMaxHeight"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, ulMaxHeight) - 64usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::Reserved1"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, Reserved1) - 72usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::display_area"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, display_area) - 80usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::OutputFormat"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, OutputFormat) - 88usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::DeinterlaceMode"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, DeinterlaceMode) - 92usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::ulTargetWidth"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, ulTargetWidth) - 96usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::ulTargetHeight"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, ulTargetHeight) - 104usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::ulNumOutputSurfaces"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, ulNumOutputSurfaces) - 112usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::vidLock"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, vidLock) - 120usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::target_rect"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, target_rect) - 128usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::enableHistogram"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, enableHistogram) - 136usize];
    ["Offset of field: _CUVIDDECODECREATEINFO::Reserved2"]
        [::core::mem::offset_of!(_CUVIDDECODECREATEINFO, Reserved2) - 144usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDH264DPBENTRY"][::core::mem::size_of::<_CUVIDH264DPBENTRY>() - 28usize];
    ["Alignment of _CUVIDH264DPBENTRY"][::core::mem::align_of::<_CUVIDH264DPBENTRY>() - 4usize];
    ["Offset of field: _CUVIDH264DPBENTRY::PicIdx"]
        [::core::mem::offset_of!(_CUVIDH264DPBENTRY, PicIdx) - 0usize];
    ["Offset of field: _CUVIDH264DPBENTRY::FrameIdx"]
        [::core::mem::offset_of!(_CUVIDH264DPBENTRY, FrameIdx) - 4usize];
    ["Offset of field: _CUVIDH264DPBENTRY::is_long_term"]
        [::core::mem::offset_of!(_CUVIDH264DPBENTRY, is_long_term) - 8usize];
    ["Offset of field: _CUVIDH264DPBENTRY::not_existing"]
        [::core::mem::offset_of!(_CUVIDH264DPBENTRY, not_existing) - 12usize];
    ["Offset of field: _CUVIDH264DPBENTRY::used_for_reference"]
        [::core::mem::offset_of!(_CUVIDH264DPBENTRY, used_for_reference) - 16usize];
    ["Offset of field: _CUVIDH264DPBENTRY::FieldOrderCnt"]
        [::core::mem::offset_of!(_CUVIDH264DPBENTRY, FieldOrderCnt) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDH264MVCEXT"][::core::mem::size_of::<_CUVIDH264MVCEXT>() - 140usize];
    ["Alignment of _CUVIDH264MVCEXT"][::core::mem::align_of::<_CUVIDH264MVCEXT>() - 4usize];
    ["Offset of field: _CUVIDH264MVCEXT::num_views_minus1"]
        [::core::mem::offset_of!(_CUVIDH264MVCEXT, num_views_minus1) - 0usize];
    ["Offset of field: _CUVIDH264MVCEXT::view_id"]
        [::core::mem::offset_of!(_CUVIDH264MVCEXT, view_id) - 4usize];
    ["Offset of field: _CUVIDH264MVCEXT::inter_view_flag"]
        [::core::mem::offset_of!(_CUVIDH264MVCEXT, inter_view_flag) - 8usize];
    ["Offset of field: _CUVIDH264MVCEXT::num_inter_view_refs_l0"]
        [::core::mem::offset_of!(_CUVIDH264MVCEXT, num_inter_view_refs_l0) - 9usize];
    ["Offset of field: _CUVIDH264MVCEXT::num_inter_view_refs_l1"]
        [::core::mem::offset_of!(_CUVIDH264MVCEXT, num_inter_view_refs_l1) - 10usize];
    ["Offset of field: _CUVIDH264MVCEXT::MVCReserved8Bits"]
        [::core::mem::offset_of!(_CUVIDH264MVCEXT, MVCReserved8Bits) - 11usize];
    ["Offset of field: _CUVIDH264MVCEXT::InterViewRefsL0"]
        [::core::mem::offset_of!(_CUVIDH264MVCEXT, InterViewRefsL0) - 12usize];
    ["Offset of field: _CUVIDH264MVCEXT::InterViewRefsL1"]
        [::core::mem::offset_of!(_CUVIDH264MVCEXT, InterViewRefsL1) - 76usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDH264SVCEXT"][::core::mem::size_of::<_CUVIDH264SVCEXT>() - 48usize];
    ["Alignment of _CUVIDH264SVCEXT"][::core::mem::align_of::<_CUVIDH264SVCEXT>() - 8usize];
    ["Offset of field: _CUVIDH264SVCEXT::profile_idc"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, profile_idc) - 0usize];
    ["Offset of field: _CUVIDH264SVCEXT::level_idc"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, level_idc) - 1usize];
    ["Offset of field: _CUVIDH264SVCEXT::DQId"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, DQId) - 2usize];
    ["Offset of field: _CUVIDH264SVCEXT::DQIdMax"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, DQIdMax) - 3usize];
    ["Offset of field: _CUVIDH264SVCEXT::disable_inter_layer_deblocking_filter_idc"][::core::mem::offset_of!(
        _CUVIDH264SVCEXT,
        disable_inter_layer_deblocking_filter_idc
    ) - 4usize];
    ["Offset of field: _CUVIDH264SVCEXT::ref_layer_chroma_phase_y_plus1"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, ref_layer_chroma_phase_y_plus1) - 5usize];
    ["Offset of field: _CUVIDH264SVCEXT::inter_layer_slice_alpha_c0_offset_div2"][::core::mem::offset_of!(
        _CUVIDH264SVCEXT,
        inter_layer_slice_alpha_c0_offset_div2
    ) - 6usize];
    ["Offset of field: _CUVIDH264SVCEXT::inter_layer_slice_beta_offset_div2"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, inter_layer_slice_beta_offset_div2) - 7usize];
    ["Offset of field: _CUVIDH264SVCEXT::DPBEntryValidFlag"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, DPBEntryValidFlag) - 8usize];
    ["Offset of field: _CUVIDH264SVCEXT::inter_layer_deblocking_filter_control_present_flag"][::core::mem::offset_of!(
        _CUVIDH264SVCEXT,
        inter_layer_deblocking_filter_control_present_flag
    )
        - 10usize];
    ["Offset of field: _CUVIDH264SVCEXT::extended_spatial_scalability_idc"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, extended_spatial_scalability_idc) - 11usize];
    ["Offset of field: _CUVIDH264SVCEXT::adaptive_tcoeff_level_prediction_flag"][::core::mem::offset_of!(
        _CUVIDH264SVCEXT,
        adaptive_tcoeff_level_prediction_flag
    ) - 12usize];
    ["Offset of field: _CUVIDH264SVCEXT::slice_header_restriction_flag"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, slice_header_restriction_flag) - 13usize];
    ["Offset of field: _CUVIDH264SVCEXT::chroma_phase_x_plus1_flag"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, chroma_phase_x_plus1_flag) - 14usize];
    ["Offset of field: _CUVIDH264SVCEXT::chroma_phase_y_plus1"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, chroma_phase_y_plus1) - 15usize];
    ["Offset of field: _CUVIDH264SVCEXT::tcoeff_level_prediction_flag"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, tcoeff_level_prediction_flag) - 16usize];
    ["Offset of field: _CUVIDH264SVCEXT::constrained_intra_resampling_flag"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, constrained_intra_resampling_flag) - 17usize];
    ["Offset of field: _CUVIDH264SVCEXT::ref_layer_chroma_phase_x_plus1_flag"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, ref_layer_chroma_phase_x_plus1_flag) - 18usize];
    ["Offset of field: _CUVIDH264SVCEXT::store_ref_base_pic_flag"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, store_ref_base_pic_flag) - 19usize];
    ["Offset of field: _CUVIDH264SVCEXT::Reserved8BitsA"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, Reserved8BitsA) - 20usize];
    ["Offset of field: _CUVIDH264SVCEXT::Reserved8BitsB"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, Reserved8BitsB) - 21usize];
    ["Offset of field: _CUVIDH264SVCEXT::scaled_ref_layer_left_offset"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, scaled_ref_layer_left_offset) - 22usize];
    ["Offset of field: _CUVIDH264SVCEXT::scaled_ref_layer_top_offset"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, scaled_ref_layer_top_offset) - 24usize];
    ["Offset of field: _CUVIDH264SVCEXT::scaled_ref_layer_right_offset"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, scaled_ref_layer_right_offset) - 26usize];
    ["Offset of field: _CUVIDH264SVCEXT::scaled_ref_layer_bottom_offset"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, scaled_ref_layer_bottom_offset) - 28usize];
    ["Offset of field: _CUVIDH264SVCEXT::Reserved16Bits"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, Reserved16Bits) - 30usize];
    ["Offset of field: _CUVIDH264SVCEXT::pNextLayer"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, pNextLayer) - 32usize];
    ["Offset of field: _CUVIDH264SVCEXT::bRefBaseLayer"]
        [::core::mem::offset_of!(_CUVIDH264SVCEXT, bRefBaseLayer) - 40usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDH264PICPARAMS__bindgen_ty_1"]
        [::core::mem::size_of::<_CUVIDH264PICPARAMS__bindgen_ty_1>() - 8usize];
    ["Alignment of _CUVIDH264PICPARAMS__bindgen_ty_1"]
        [::core::mem::align_of::<_CUVIDH264PICPARAMS__bindgen_ty_1>() - 8usize];
    ["Offset of field: _CUVIDH264PICPARAMS__bindgen_ty_1::slice_group_map_addr"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS__bindgen_ty_1, slice_group_map_addr) - 0usize];
    ["Offset of field: _CUVIDH264PICPARAMS__bindgen_ty_1::pMb2SliceGroupMap"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS__bindgen_ty_1, pMb2SliceGroupMap) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDH264PICPARAMS__bindgen_ty_2"]
        [::core::mem::size_of::<_CUVIDH264PICPARAMS__bindgen_ty_2>() - 144usize];
    ["Alignment of _CUVIDH264PICPARAMS__bindgen_ty_2"]
        [::core::mem::align_of::<_CUVIDH264PICPARAMS__bindgen_ty_2>() - 8usize];
    ["Offset of field: _CUVIDH264PICPARAMS__bindgen_ty_2::mvcext"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS__bindgen_ty_2, mvcext) - 0usize];
    ["Offset of field: _CUVIDH264PICPARAMS__bindgen_ty_2::svcext"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS__bindgen_ty_2, svcext) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDH264PICPARAMS"][::core::mem::size_of::<_CUVIDH264PICPARAMS>() - 984usize];
    ["Alignment of _CUVIDH264PICPARAMS"][::core::mem::align_of::<_CUVIDH264PICPARAMS>() - 8usize];
    ["Offset of field: _CUVIDH264PICPARAMS::log2_max_frame_num_minus4"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, log2_max_frame_num_minus4) - 0usize];
    ["Offset of field: _CUVIDH264PICPARAMS::pic_order_cnt_type"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, pic_order_cnt_type) - 4usize];
    ["Offset of field: _CUVIDH264PICPARAMS::log2_max_pic_order_cnt_lsb_minus4"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, log2_max_pic_order_cnt_lsb_minus4) - 8usize];
    ["Offset of field: _CUVIDH264PICPARAMS::delta_pic_order_always_zero_flag"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, delta_pic_order_always_zero_flag) - 12usize];
    ["Offset of field: _CUVIDH264PICPARAMS::frame_mbs_only_flag"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, frame_mbs_only_flag) - 16usize];
    ["Offset of field: _CUVIDH264PICPARAMS::direct_8x8_inference_flag"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, direct_8x8_inference_flag) - 20usize];
    ["Offset of field: _CUVIDH264PICPARAMS::num_ref_frames"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, num_ref_frames) - 24usize];
    ["Offset of field: _CUVIDH264PICPARAMS::residual_colour_transform_flag"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, residual_colour_transform_flag) - 28usize];
    ["Offset of field: _CUVIDH264PICPARAMS::bit_depth_luma_minus8"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, bit_depth_luma_minus8) - 29usize];
    ["Offset of field: _CUVIDH264PICPARAMS::bit_depth_chroma_minus8"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, bit_depth_chroma_minus8) - 30usize];
    ["Offset of field: _CUVIDH264PICPARAMS::qpprime_y_zero_transform_bypass_flag"][::core::mem::offset_of!(
        _CUVIDH264PICPARAMS,
        qpprime_y_zero_transform_bypass_flag
    ) - 31usize];
    ["Offset of field: _CUVIDH264PICPARAMS::entropy_coding_mode_flag"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, entropy_coding_mode_flag) - 32usize];
    ["Offset of field: _CUVIDH264PICPARAMS::pic_order_present_flag"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, pic_order_present_flag) - 36usize];
    ["Offset of field: _CUVIDH264PICPARAMS::num_ref_idx_l0_active_minus1"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, num_ref_idx_l0_active_minus1) - 40usize];
    ["Offset of field: _CUVIDH264PICPARAMS::num_ref_idx_l1_active_minus1"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, num_ref_idx_l1_active_minus1) - 44usize];
    ["Offset of field: _CUVIDH264PICPARAMS::weighted_pred_flag"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, weighted_pred_flag) - 48usize];
    ["Offset of field: _CUVIDH264PICPARAMS::weighted_bipred_idc"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, weighted_bipred_idc) - 52usize];
    ["Offset of field: _CUVIDH264PICPARAMS::pic_init_qp_minus26"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, pic_init_qp_minus26) - 56usize];
    ["Offset of field: _CUVIDH264PICPARAMS::deblocking_filter_control_present_flag"][::core::mem::offset_of!(
        _CUVIDH264PICPARAMS,
        deblocking_filter_control_present_flag
    ) - 60usize];
    ["Offset of field: _CUVIDH264PICPARAMS::redundant_pic_cnt_present_flag"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, redundant_pic_cnt_present_flag) - 64usize];
    ["Offset of field: _CUVIDH264PICPARAMS::transform_8x8_mode_flag"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, transform_8x8_mode_flag) - 68usize];
    ["Offset of field: _CUVIDH264PICPARAMS::MbaffFrameFlag"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, MbaffFrameFlag) - 72usize];
    ["Offset of field: _CUVIDH264PICPARAMS::constrained_intra_pred_flag"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, constrained_intra_pred_flag) - 76usize];
    ["Offset of field: _CUVIDH264PICPARAMS::chroma_qp_index_offset"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, chroma_qp_index_offset) - 80usize];
    ["Offset of field: _CUVIDH264PICPARAMS::second_chroma_qp_index_offset"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, second_chroma_qp_index_offset) - 84usize];
    ["Offset of field: _CUVIDH264PICPARAMS::ref_pic_flag"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, ref_pic_flag) - 88usize];
    ["Offset of field: _CUVIDH264PICPARAMS::frame_num"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, frame_num) - 92usize];
    ["Offset of field: _CUVIDH264PICPARAMS::CurrFieldOrderCnt"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, CurrFieldOrderCnt) - 96usize];
    ["Offset of field: _CUVIDH264PICPARAMS::dpb"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, dpb) - 104usize];
    ["Offset of field: _CUVIDH264PICPARAMS::WeightScale4x4"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, WeightScale4x4) - 552usize];
    ["Offset of field: _CUVIDH264PICPARAMS::WeightScale8x8"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, WeightScale8x8) - 648usize];
    ["Offset of field: _CUVIDH264PICPARAMS::fmo_aso_enable"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, fmo_aso_enable) - 776usize];
    ["Offset of field: _CUVIDH264PICPARAMS::num_slice_groups_minus1"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, num_slice_groups_minus1) - 777usize];
    ["Offset of field: _CUVIDH264PICPARAMS::slice_group_map_type"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, slice_group_map_type) - 778usize];
    ["Offset of field: _CUVIDH264PICPARAMS::pic_init_qs_minus26"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, pic_init_qs_minus26) - 779usize];
    ["Offset of field: _CUVIDH264PICPARAMS::slice_group_change_rate_minus1"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, slice_group_change_rate_minus1) - 780usize];
    ["Offset of field: _CUVIDH264PICPARAMS::fmo"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, fmo) - 784usize];
    ["Offset of field: _CUVIDH264PICPARAMS::Reserved"]
        [::core::mem::offset_of!(_CUVIDH264PICPARAMS, Reserved) - 796usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDMPEG2PICPARAMS"][::core::mem::size_of::<_CUVIDMPEG2PICPARAMS>() - 192usize];
    ["Alignment of _CUVIDMPEG2PICPARAMS"][::core::mem::align_of::<_CUVIDMPEG2PICPARAMS>() - 4usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::ForwardRefIdx"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, ForwardRefIdx) - 0usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::BackwardRefIdx"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, BackwardRefIdx) - 4usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::picture_coding_type"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, picture_coding_type) - 8usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::full_pel_forward_vector"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, full_pel_forward_vector) - 12usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::full_pel_backward_vector"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, full_pel_backward_vector) - 16usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::f_code"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, f_code) - 20usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::intra_dc_precision"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, intra_dc_precision) - 36usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::frame_pred_frame_dct"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, frame_pred_frame_dct) - 40usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::concealment_motion_vectors"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, concealment_motion_vectors) - 44usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::q_scale_type"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, q_scale_type) - 48usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::intra_vlc_format"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, intra_vlc_format) - 52usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::alternate_scan"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, alternate_scan) - 56usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::top_field_first"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, top_field_first) - 60usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::QuantMatrixIntra"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, QuantMatrixIntra) - 64usize];
    ["Offset of field: _CUVIDMPEG2PICPARAMS::QuantMatrixInter"]
        [::core::mem::offset_of!(_CUVIDMPEG2PICPARAMS, QuantMatrixInter) - 128usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDMPEG4PICPARAMS"][::core::mem::size_of::<_CUVIDMPEG4PICPARAMS>() - 220usize];
    ["Alignment of _CUVIDMPEG4PICPARAMS"][::core::mem::align_of::<_CUVIDMPEG4PICPARAMS>() - 4usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::ForwardRefIdx"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, ForwardRefIdx) - 0usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::BackwardRefIdx"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, BackwardRefIdx) - 4usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::video_object_layer_width"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, video_object_layer_width) - 8usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::video_object_layer_height"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, video_object_layer_height) - 12usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::vop_time_increment_bitcount"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, vop_time_increment_bitcount) - 16usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::top_field_first"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, top_field_first) - 20usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::resync_marker_disable"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, resync_marker_disable) - 24usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::quant_type"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, quant_type) - 28usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::quarter_sample"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, quarter_sample) - 32usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::short_video_header"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, short_video_header) - 36usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::divx_flags"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, divx_flags) - 40usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::vop_coding_type"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, vop_coding_type) - 44usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::vop_coded"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, vop_coded) - 48usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::vop_rounding_type"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, vop_rounding_type) - 52usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::alternate_vertical_scan_flag"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, alternate_vertical_scan_flag) - 56usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::interlaced"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, interlaced) - 60usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::vop_fcode_forward"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, vop_fcode_forward) - 64usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::vop_fcode_backward"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, vop_fcode_backward) - 68usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::trd"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, trd) - 72usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::trb"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, trb) - 80usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::QuantMatrixIntra"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, QuantMatrixIntra) - 88usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::QuantMatrixInter"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, QuantMatrixInter) - 152usize];
    ["Offset of field: _CUVIDMPEG4PICPARAMS::gmc_enabled"]
        [::core::mem::offset_of!(_CUVIDMPEG4PICPARAMS, gmc_enabled) - 216usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDVC1PICPARAMS"][::core::mem::size_of::<_CUVIDVC1PICPARAMS>() - 132usize];
    ["Alignment of _CUVIDVC1PICPARAMS"][::core::mem::align_of::<_CUVIDVC1PICPARAMS>() - 4usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::ForwardRefIdx"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, ForwardRefIdx) - 0usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::BackwardRefIdx"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, BackwardRefIdx) - 4usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::FrameWidth"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, FrameWidth) - 8usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::FrameHeight"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, FrameHeight) - 12usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::intra_pic_flag"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, intra_pic_flag) - 16usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::ref_pic_flag"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, ref_pic_flag) - 20usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::progressive_fcm"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, progressive_fcm) - 24usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::profile"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, profile) - 28usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::postprocflag"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, postprocflag) - 32usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::pulldown"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, pulldown) - 36usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::interlace"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, interlace) - 40usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::tfcntrflag"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, tfcntrflag) - 44usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::finterpflag"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, finterpflag) - 48usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::psf"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, psf) - 52usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::multires"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, multires) - 56usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::syncmarker"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, syncmarker) - 60usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::rangered"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, rangered) - 64usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::maxbframes"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, maxbframes) - 68usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::panscan_flag"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, panscan_flag) - 72usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::refdist_flag"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, refdist_flag) - 76usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::extended_mv"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, extended_mv) - 80usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::dquant"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, dquant) - 84usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::vstransform"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, vstransform) - 88usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::loopfilter"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, loopfilter) - 92usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::fastuvmc"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, fastuvmc) - 96usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::overlap"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, overlap) - 100usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::quantizer"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, quantizer) - 104usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::extended_dmv"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, extended_dmv) - 108usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::range_mapy_flag"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, range_mapy_flag) - 112usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::range_mapy"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, range_mapy) - 116usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::range_mapuv_flag"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, range_mapuv_flag) - 120usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::range_mapuv"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, range_mapuv) - 124usize];
    ["Offset of field: _CUVIDVC1PICPARAMS::rangeredfrm"]
        [::core::mem::offset_of!(_CUVIDVC1PICPARAMS, rangeredfrm) - 128usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDJPEGPICPARAMS"][::core::mem::size_of::<_CUVIDJPEGPICPARAMS>() - 2736usize];
    ["Alignment of _CUVIDJPEGPICPARAMS"][::core::mem::align_of::<_CUVIDJPEGPICPARAMS>() - 4usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::numComponents"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, numComponents) - 0usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::bitDepth"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, bitDepth) - 1usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::quantizationTableSelector"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, quantizationTableSelector) - 2usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::scanOffset"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, scanOffset) - 8usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::scanSize"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, scanSize) - 24usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::restartInterval"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, restartInterval) - 40usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::componentIdentifier"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, componentIdentifier) - 42usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::hasQMatrix"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, hasQMatrix) - 46usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::hasHuffman"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, hasHuffman) - 47usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::quantvals"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, quantvals) - 48usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::bits_ac"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, bits_ac) - 560usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::table_ac"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, table_ac) - 624usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::bits_dc"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, bits_dc) - 1648usize];
    ["Offset of field: _CUVIDJPEGPICPARAMS::table_dc"]
        [::core::mem::offset_of!(_CUVIDJPEGPICPARAMS, table_dc) - 1712usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDHEVCPICPARAMS"][::core::mem::size_of::<_CUVIDHEVCPICPARAMS>() - 1484usize];
    ["Alignment of _CUVIDHEVCPICPARAMS"][::core::mem::align_of::<_CUVIDHEVCPICPARAMS>() - 4usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::pic_width_in_luma_samples"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, pic_width_in_luma_samples) - 0usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::pic_height_in_luma_samples"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, pic_height_in_luma_samples) - 4usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::log2_min_luma_coding_block_size_minus3"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        log2_min_luma_coding_block_size_minus3
    ) - 8usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::log2_diff_max_min_luma_coding_block_size"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        log2_diff_max_min_luma_coding_block_size
    ) - 9usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::log2_min_transform_block_size_minus2"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        log2_min_transform_block_size_minus2
    ) - 10usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::log2_diff_max_min_transform_block_size"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        log2_diff_max_min_transform_block_size
    ) - 11usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::pcm_enabled_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, pcm_enabled_flag) - 12usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::log2_min_pcm_luma_coding_block_size_minus3"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        log2_min_pcm_luma_coding_block_size_minus3
    )
        - 13usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::log2_diff_max_min_pcm_luma_coding_block_size"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        log2_diff_max_min_pcm_luma_coding_block_size
    )
        - 14usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::pcm_sample_bit_depth_luma_minus1"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, pcm_sample_bit_depth_luma_minus1) - 15usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::pcm_sample_bit_depth_chroma_minus1"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        pcm_sample_bit_depth_chroma_minus1
    ) - 16usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::pcm_loop_filter_disabled_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, pcm_loop_filter_disabled_flag) - 17usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::strong_intra_smoothing_enabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        strong_intra_smoothing_enabled_flag
    ) - 18usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::max_transform_hierarchy_depth_intra"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        max_transform_hierarchy_depth_intra
    ) - 19usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::max_transform_hierarchy_depth_inter"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        max_transform_hierarchy_depth_inter
    ) - 20usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::amp_enabled_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, amp_enabled_flag) - 21usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::separate_colour_plane_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, separate_colour_plane_flag) - 22usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::log2_max_pic_order_cnt_lsb_minus4"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, log2_max_pic_order_cnt_lsb_minus4) - 23usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::num_short_term_ref_pic_sets"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, num_short_term_ref_pic_sets) - 24usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::long_term_ref_pics_present_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, long_term_ref_pics_present_flag) - 25usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::num_long_term_ref_pics_sps"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, num_long_term_ref_pics_sps) - 26usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::sps_temporal_mvp_enabled_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, sps_temporal_mvp_enabled_flag) - 27usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::sample_adaptive_offset_enabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        sample_adaptive_offset_enabled_flag
    ) - 28usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::scaling_list_enable_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, scaling_list_enable_flag) - 29usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::IrapPicFlag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, IrapPicFlag) - 30usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::IdrPicFlag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, IdrPicFlag) - 31usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::bit_depth_luma_minus8"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, bit_depth_luma_minus8) - 32usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::bit_depth_chroma_minus8"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, bit_depth_chroma_minus8) - 33usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::log2_max_transform_skip_block_size_minus2"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        log2_max_transform_skip_block_size_minus2
    )
        - 34usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::log2_sao_offset_scale_luma"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, log2_sao_offset_scale_luma) - 35usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::log2_sao_offset_scale_chroma"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, log2_sao_offset_scale_chroma) - 36usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::high_precision_offsets_enabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        high_precision_offsets_enabled_flag
    ) - 37usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::reserved1"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, reserved1) - 38usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::dependent_slice_segments_enabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        dependent_slice_segments_enabled_flag
    ) - 48usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::slice_segment_header_extension_present_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        slice_segment_header_extension_present_flag
    )
        - 49usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::sign_data_hiding_enabled_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, sign_data_hiding_enabled_flag) - 50usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::cu_qp_delta_enabled_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, cu_qp_delta_enabled_flag) - 51usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::diff_cu_qp_delta_depth"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, diff_cu_qp_delta_depth) - 52usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::init_qp_minus26"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, init_qp_minus26) - 53usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::pps_cb_qp_offset"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, pps_cb_qp_offset) - 54usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::pps_cr_qp_offset"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, pps_cr_qp_offset) - 55usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::constrained_intra_pred_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, constrained_intra_pred_flag) - 56usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::weighted_pred_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, weighted_pred_flag) - 57usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::weighted_bipred_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, weighted_bipred_flag) - 58usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::transform_skip_enabled_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, transform_skip_enabled_flag) - 59usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::transquant_bypass_enabled_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, transquant_bypass_enabled_flag) - 60usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::entropy_coding_sync_enabled_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, entropy_coding_sync_enabled_flag) - 61usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::log2_parallel_merge_level_minus2"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, log2_parallel_merge_level_minus2) - 62usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::num_extra_slice_header_bits"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, num_extra_slice_header_bits) - 63usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::loop_filter_across_tiles_enabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        loop_filter_across_tiles_enabled_flag
    ) - 64usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::loop_filter_across_slices_enabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        loop_filter_across_slices_enabled_flag
    ) - 65usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::output_flag_present_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, output_flag_present_flag) - 66usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::num_ref_idx_l0_default_active_minus1"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        num_ref_idx_l0_default_active_minus1
    ) - 67usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::num_ref_idx_l1_default_active_minus1"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        num_ref_idx_l1_default_active_minus1
    ) - 68usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::lists_modification_present_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, lists_modification_present_flag) - 69usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::cabac_init_present_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, cabac_init_present_flag) - 70usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::pps_slice_chroma_qp_offsets_present_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        pps_slice_chroma_qp_offsets_present_flag
    ) - 71usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::deblocking_filter_override_enabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        deblocking_filter_override_enabled_flag
    ) - 72usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::pps_deblocking_filter_disabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        pps_deblocking_filter_disabled_flag
    ) - 73usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::pps_beta_offset_div2"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, pps_beta_offset_div2) - 74usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::pps_tc_offset_div2"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, pps_tc_offset_div2) - 75usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::tiles_enabled_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, tiles_enabled_flag) - 76usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::uniform_spacing_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, uniform_spacing_flag) - 77usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::num_tile_columns_minus1"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, num_tile_columns_minus1) - 78usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::num_tile_rows_minus1"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, num_tile_rows_minus1) - 79usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::column_width_minus1"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, column_width_minus1) - 80usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::row_height_minus1"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, row_height_minus1) - 122usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::sps_range_extension_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, sps_range_extension_flag) - 164usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::transform_skip_rotation_enabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        transform_skip_rotation_enabled_flag
    ) - 165usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::transform_skip_context_enabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        transform_skip_context_enabled_flag
    ) - 166usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::implicit_rdpcm_enabled_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, implicit_rdpcm_enabled_flag) - 167usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::explicit_rdpcm_enabled_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, explicit_rdpcm_enabled_flag) - 168usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::extended_precision_processing_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        extended_precision_processing_flag
    ) - 169usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::intra_smoothing_disabled_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, intra_smoothing_disabled_flag) - 170usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::persistent_rice_adaptation_enabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        persistent_rice_adaptation_enabled_flag
    ) - 171usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::cabac_bypass_alignment_enabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        cabac_bypass_alignment_enabled_flag
    ) - 172usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::pps_range_extension_flag"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, pps_range_extension_flag) - 173usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::cross_component_prediction_enabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        cross_component_prediction_enabled_flag
    ) - 174usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::chroma_qp_offset_list_enabled_flag"][::core::mem::offset_of!(
        _CUVIDHEVCPICPARAMS,
        chroma_qp_offset_list_enabled_flag
    ) - 175usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::diff_cu_chroma_qp_offset_depth"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, diff_cu_chroma_qp_offset_depth) - 176usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::chroma_qp_offset_list_len_minus1"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, chroma_qp_offset_list_len_minus1) - 177usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::cb_qp_offset_list"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, cb_qp_offset_list) - 178usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::cr_qp_offset_list"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, cr_qp_offset_list) - 184usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::reserved2"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, reserved2) - 190usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::reserved3"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, reserved3) - 192usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::NumBitsForShortTermRPSInSlice"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, NumBitsForShortTermRPSInSlice) - 224usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::NumDeltaPocsOfRefRpsIdx"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, NumDeltaPocsOfRefRpsIdx) - 228usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::NumPocTotalCurr"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, NumPocTotalCurr) - 232usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::NumPocStCurrBefore"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, NumPocStCurrBefore) - 236usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::NumPocStCurrAfter"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, NumPocStCurrAfter) - 240usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::NumPocLtCurr"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, NumPocLtCurr) - 244usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::CurrPicOrderCntVal"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, CurrPicOrderCntVal) - 248usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::RefPicIdx"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, RefPicIdx) - 252usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::PicOrderCntVal"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, PicOrderCntVal) - 316usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::IsLongTerm"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, IsLongTerm) - 380usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::RefPicSetStCurrBefore"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, RefPicSetStCurrBefore) - 396usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::RefPicSetStCurrAfter"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, RefPicSetStCurrAfter) - 404usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::RefPicSetLtCurr"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, RefPicSetLtCurr) - 412usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::RefPicSetInterLayer0"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, RefPicSetInterLayer0) - 420usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::RefPicSetInterLayer1"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, RefPicSetInterLayer1) - 428usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::reserved4"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, reserved4) - 436usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::ScalingList4x4"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, ScalingList4x4) - 484usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::ScalingList8x8"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, ScalingList8x8) - 580usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::ScalingList16x16"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, ScalingList16x16) - 964usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::ScalingList32x32"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, ScalingList32x32) - 1348usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::ScalingListDCCoeff16x16"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, ScalingListDCCoeff16x16) - 1476usize];
    ["Offset of field: _CUVIDHEVCPICPARAMS::ScalingListDCCoeff32x32"]
        [::core::mem::offset_of!(_CUVIDHEVCPICPARAMS, ScalingListDCCoeff32x32) - 1482usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDVP8PICPARAMS__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<_CUVIDVP8PICPARAMS__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Alignment of _CUVIDVP8PICPARAMS__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<_CUVIDVP8PICPARAMS__bindgen_ty_1__bindgen_ty_1>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDVP8PICPARAMS__bindgen_ty_1"]
        [::core::mem::size_of::<_CUVIDVP8PICPARAMS__bindgen_ty_1>() - 1usize];
    ["Alignment of _CUVIDVP8PICPARAMS__bindgen_ty_1"]
        [::core::mem::align_of::<_CUVIDVP8PICPARAMS__bindgen_ty_1>() - 1usize];
    ["Offset of field: _CUVIDVP8PICPARAMS__bindgen_ty_1::vp8_frame_tag"]
        [::core::mem::offset_of!(_CUVIDVP8PICPARAMS__bindgen_ty_1, vp8_frame_tag) - 0usize];
    ["Offset of field: _CUVIDVP8PICPARAMS__bindgen_ty_1::wFrameTagFlags"]
        [::core::mem::offset_of!(_CUVIDVP8PICPARAMS__bindgen_ty_1, wFrameTagFlags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDVP8PICPARAMS"][::core::mem::size_of::<_CUVIDVP8PICPARAMS>() - 32usize];
    ["Alignment of _CUVIDVP8PICPARAMS"][::core::mem::align_of::<_CUVIDVP8PICPARAMS>() - 4usize];
    ["Offset of field: _CUVIDVP8PICPARAMS::width"]
        [::core::mem::offset_of!(_CUVIDVP8PICPARAMS, width) - 0usize];
    ["Offset of field: _CUVIDVP8PICPARAMS::height"]
        [::core::mem::offset_of!(_CUVIDVP8PICPARAMS, height) - 4usize];
    ["Offset of field: _CUVIDVP8PICPARAMS::first_partition_size"]
        [::core::mem::offset_of!(_CUVIDVP8PICPARAMS, first_partition_size) - 8usize];
    ["Offset of field: _CUVIDVP8PICPARAMS::LastRefIdx"]
        [::core::mem::offset_of!(_CUVIDVP8PICPARAMS, LastRefIdx) - 12usize];
    ["Offset of field: _CUVIDVP8PICPARAMS::GoldenRefIdx"]
        [::core::mem::offset_of!(_CUVIDVP8PICPARAMS, GoldenRefIdx) - 13usize];
    ["Offset of field: _CUVIDVP8PICPARAMS::AltRefIdx"]
        [::core::mem::offset_of!(_CUVIDVP8PICPARAMS, AltRefIdx) - 14usize];
    ["Offset of field: _CUVIDVP8PICPARAMS::Reserved1"]
        [::core::mem::offset_of!(_CUVIDVP8PICPARAMS, Reserved1) - 16usize];
    ["Offset of field: _CUVIDVP8PICPARAMS::Reserved2"]
        [::core::mem::offset_of!(_CUVIDVP8PICPARAMS, Reserved2) - 20usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDVP9PICPARAMS"][::core::mem::size_of::<_CUVIDVP9PICPARAMS>() - 220usize];
    ["Alignment of _CUVIDVP9PICPARAMS"][::core::mem::align_of::<_CUVIDVP9PICPARAMS>() - 4usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::width"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, width) - 0usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::height"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, height) - 4usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::LastRefIdx"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, LastRefIdx) - 8usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::GoldenRefIdx"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, GoldenRefIdx) - 9usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::AltRefIdx"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, AltRefIdx) - 10usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::colorSpace"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, colorSpace) - 11usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::reserved16Bits"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, reserved16Bits) - 14usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::refFrameSignBias"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, refFrameSignBias) - 16usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::bitDepthMinus8Luma"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, bitDepthMinus8Luma) - 20usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::bitDepthMinus8Chroma"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, bitDepthMinus8Chroma) - 21usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::loopFilterLevel"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, loopFilterLevel) - 22usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::loopFilterSharpness"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, loopFilterSharpness) - 23usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::modeRefLfEnabled"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, modeRefLfEnabled) - 24usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::log2_tile_columns"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, log2_tile_columns) - 25usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::log2_tile_rows"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, log2_tile_rows) - 26usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::segmentFeatureEnable"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, segmentFeatureEnable) - 28usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::segmentFeatureData"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, segmentFeatureData) - 60usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::mb_segment_tree_probs"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, mb_segment_tree_probs) - 124usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::segment_pred_probs"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, segment_pred_probs) - 131usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::reservedSegment16Bits"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, reservedSegment16Bits) - 134usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::qpYAc"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, qpYAc) - 136usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::qpYDc"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, qpYDc) - 140usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::qpChDc"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, qpChDc) - 144usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::qpChAc"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, qpChAc) - 148usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::activeRefIdx"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, activeRefIdx) - 152usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::resetFrameContext"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, resetFrameContext) - 164usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::mcomp_filter_type"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, mcomp_filter_type) - 168usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::mbRefLfDelta"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, mbRefLfDelta) - 172usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::mbModeLfDelta"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, mbModeLfDelta) - 188usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::frameTagSize"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, frameTagSize) - 196usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::offsetToDctParts"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, offsetToDctParts) - 200usize];
    ["Offset of field: _CUVIDVP9PICPARAMS::reserved128Bits"]
        [::core::mem::offset_of!(_CUVIDVP9PICPARAMS, reserved128Bits) - 204usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDAV1PICPARAMS__bindgen_ty_1"]
        [::core::mem::size_of::<_CUVIDAV1PICPARAMS__bindgen_ty_1>() - 12usize];
    ["Alignment of _CUVIDAV1PICPARAMS__bindgen_ty_1"]
        [::core::mem::align_of::<_CUVIDAV1PICPARAMS__bindgen_ty_1>() - 4usize];
    ["Offset of field: _CUVIDAV1PICPARAMS__bindgen_ty_1::width"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS__bindgen_ty_1, width) - 0usize];
    ["Offset of field: _CUVIDAV1PICPARAMS__bindgen_ty_1::height"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS__bindgen_ty_1, height) - 4usize];
    ["Offset of field: _CUVIDAV1PICPARAMS__bindgen_ty_1::index"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS__bindgen_ty_1, index) - 8usize];
    ["Offset of field: _CUVIDAV1PICPARAMS__bindgen_ty_1::reserved24Bits"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS__bindgen_ty_1, reserved24Bits) - 9usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDAV1PICPARAMS__bindgen_ty_2"]
        [::core::mem::size_of::<_CUVIDAV1PICPARAMS__bindgen_ty_2>() - 28usize];
    ["Alignment of _CUVIDAV1PICPARAMS__bindgen_ty_2"]
        [::core::mem::align_of::<_CUVIDAV1PICPARAMS__bindgen_ty_2>() - 4usize];
    ["Offset of field: _CUVIDAV1PICPARAMS__bindgen_ty_2::reserved24Bits"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS__bindgen_ty_2, reserved24Bits) - 1usize];
    ["Offset of field: _CUVIDAV1PICPARAMS__bindgen_ty_2::wmmat"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS__bindgen_ty_2, wmmat) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDAV1PICPARAMS"][::core::mem::size_of::<_CUVIDAV1PICPARAMS>() - 1024usize];
    ["Alignment of _CUVIDAV1PICPARAMS"][::core::mem::align_of::<_CUVIDAV1PICPARAMS>() - 4usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::width"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, width) - 0usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::height"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, height) - 4usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::frame_offset"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, frame_offset) - 8usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::decodePicIdx"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, decodePicIdx) - 12usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::tile_widths"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, tile_widths) - 28usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::tile_heights"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, tile_heights) - 156usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::cdef_y_strength"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, cdef_y_strength) - 285usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::cdef_uv_strength"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, cdef_uv_strength) - 293usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::base_qindex"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, base_qindex) - 302usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::qp_y_dc_delta_q"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, qp_y_dc_delta_q) - 303usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::qp_u_dc_delta_q"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, qp_u_dc_delta_q) - 304usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::qp_v_dc_delta_q"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, qp_v_dc_delta_q) - 305usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::qp_u_ac_delta_q"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, qp_u_ac_delta_q) - 306usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::qp_v_ac_delta_q"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, qp_v_ac_delta_q) - 307usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::qm_y"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, qm_y) - 308usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::qm_u"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, qm_u) - 309usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::qm_v"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, qm_v) - 310usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::segmentation_feature_data"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, segmentation_feature_data) - 312usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::segmentation_feature_mask"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, segmentation_feature_mask) - 440usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::loop_filter_level"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, loop_filter_level) - 448usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::loop_filter_level_u"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, loop_filter_level_u) - 450usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::loop_filter_level_v"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, loop_filter_level_v) - 451usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::loop_filter_sharpness"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, loop_filter_sharpness) - 452usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::loop_filter_ref_deltas"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, loop_filter_ref_deltas) - 453usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::loop_filter_mode_deltas"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, loop_filter_mode_deltas) - 461usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::lr_unit_size"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, lr_unit_size) - 464usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::lr_type"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, lr_type) - 467usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::primary_ref_frame"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, primary_ref_frame) - 470usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::ref_frame_map"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, ref_frame_map) - 471usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::reserved5_32bits"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, reserved5_32bits) - 480usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::ref_frame"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, ref_frame) - 484usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::global_motion"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, global_motion) - 568usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::num_y_points"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, num_y_points) - 766usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::scaling_points_y"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, scaling_points_y) - 767usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::num_cb_points"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, num_cb_points) - 795usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::scaling_points_cb"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, scaling_points_cb) - 796usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::num_cr_points"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, num_cr_points) - 816usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::scaling_points_cr"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, scaling_points_cr) - 817usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::reserved7_8bits"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, reserved7_8bits) - 837usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::random_seed"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, random_seed) - 838usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::ar_coeffs_y"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, ar_coeffs_y) - 840usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::ar_coeffs_cb"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, ar_coeffs_cb) - 888usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::ar_coeffs_cr"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, ar_coeffs_cr) - 938usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::cb_mult"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, cb_mult) - 988usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::cb_luma_mult"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, cb_luma_mult) - 989usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::cb_offset"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, cb_offset) - 990usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::cr_mult"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, cr_mult) - 992usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::cr_luma_mult"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, cr_luma_mult) - 993usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::cr_offset"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, cr_offset) - 994usize];
    ["Offset of field: _CUVIDAV1PICPARAMS::reserved"]
        [::core::mem::offset_of!(_CUVIDAV1PICPARAMS, reserved) - 996usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDPICPARAMS__bindgen_ty_1"]
        [::core::mem::size_of::<_CUVIDPICPARAMS__bindgen_ty_1>() - 4096usize];
    ["Alignment of _CUVIDPICPARAMS__bindgen_ty_1"]
        [::core::mem::align_of::<_CUVIDPICPARAMS__bindgen_ty_1>() - 8usize];
    ["Offset of field: _CUVIDPICPARAMS__bindgen_ty_1::mpeg2"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS__bindgen_ty_1, mpeg2) - 0usize];
    ["Offset of field: _CUVIDPICPARAMS__bindgen_ty_1::h264"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS__bindgen_ty_1, h264) - 0usize];
    ["Offset of field: _CUVIDPICPARAMS__bindgen_ty_1::vc1"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS__bindgen_ty_1, vc1) - 0usize];
    ["Offset of field: _CUVIDPICPARAMS__bindgen_ty_1::mpeg4"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS__bindgen_ty_1, mpeg4) - 0usize];
    ["Offset of field: _CUVIDPICPARAMS__bindgen_ty_1::jpeg"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS__bindgen_ty_1, jpeg) - 0usize];
    ["Offset of field: _CUVIDPICPARAMS__bindgen_ty_1::hevc"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS__bindgen_ty_1, hevc) - 0usize];
    ["Offset of field: _CUVIDPICPARAMS__bindgen_ty_1::vp8"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS__bindgen_ty_1, vp8) - 0usize];
    ["Offset of field: _CUVIDPICPARAMS__bindgen_ty_1::vp9"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS__bindgen_ty_1, vp9) - 0usize];
    ["Offset of field: _CUVIDPICPARAMS__bindgen_ty_1::av1"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS__bindgen_ty_1, av1) - 0usize];
    ["Offset of field: _CUVIDPICPARAMS__bindgen_ty_1::CodecReserved"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS__bindgen_ty_1, CodecReserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDPICPARAMS"][::core::mem::size_of::<_CUVIDPICPARAMS>() - 4280usize];
    ["Alignment of _CUVIDPICPARAMS"][::core::mem::align_of::<_CUVIDPICPARAMS>() - 8usize];
    ["Offset of field: _CUVIDPICPARAMS::PicWidthInMbs"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, PicWidthInMbs) - 0usize];
    ["Offset of field: _CUVIDPICPARAMS::FrameHeightInMbs"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, FrameHeightInMbs) - 4usize];
    ["Offset of field: _CUVIDPICPARAMS::CurrPicIdx"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, CurrPicIdx) - 8usize];
    ["Offset of field: _CUVIDPICPARAMS::field_pic_flag"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, field_pic_flag) - 12usize];
    ["Offset of field: _CUVIDPICPARAMS::bottom_field_flag"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, bottom_field_flag) - 16usize];
    ["Offset of field: _CUVIDPICPARAMS::second_field"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, second_field) - 20usize];
    ["Offset of field: _CUVIDPICPARAMS::nBitstreamDataLen"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, nBitstreamDataLen) - 24usize];
    ["Offset of field: _CUVIDPICPARAMS::pBitstreamData"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, pBitstreamData) - 32usize];
    ["Offset of field: _CUVIDPICPARAMS::nNumSlices"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, nNumSlices) - 40usize];
    ["Offset of field: _CUVIDPICPARAMS::pSliceDataOffsets"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, pSliceDataOffsets) - 48usize];
    ["Offset of field: _CUVIDPICPARAMS::ref_pic_flag"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, ref_pic_flag) - 56usize];
    ["Offset of field: _CUVIDPICPARAMS::intra_pic_flag"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, intra_pic_flag) - 60usize];
    ["Offset of field: _CUVIDPICPARAMS::Reserved"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, Reserved) - 64usize];
    ["Offset of field: _CUVIDPICPARAMS::CodecSpecific"]
        [::core::mem::offset_of!(_CUVIDPICPARAMS, CodecSpecific) - 184usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDPROCPARAMS"][::core::mem::size_of::<_CUVIDPROCPARAMS>() - 264usize];
    ["Alignment of _CUVIDPROCPARAMS"][::core::mem::align_of::<_CUVIDPROCPARAMS>() - 8usize];
    ["Offset of field: _CUVIDPROCPARAMS::progressive_frame"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, progressive_frame) - 0usize];
    ["Offset of field: _CUVIDPROCPARAMS::second_field"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, second_field) - 4usize];
    ["Offset of field: _CUVIDPROCPARAMS::top_field_first"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, top_field_first) - 8usize];
    ["Offset of field: _CUVIDPROCPARAMS::unpaired_field"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, unpaired_field) - 12usize];
    ["Offset of field: _CUVIDPROCPARAMS::reserved_flags"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, reserved_flags) - 16usize];
    ["Offset of field: _CUVIDPROCPARAMS::reserved_zero"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, reserved_zero) - 20usize];
    ["Offset of field: _CUVIDPROCPARAMS::raw_input_dptr"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, raw_input_dptr) - 24usize];
    ["Offset of field: _CUVIDPROCPARAMS::raw_input_pitch"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, raw_input_pitch) - 32usize];
    ["Offset of field: _CUVIDPROCPARAMS::raw_input_format"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, raw_input_format) - 36usize];
    ["Offset of field: _CUVIDPROCPARAMS::raw_output_dptr"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, raw_output_dptr) - 40usize];
    ["Offset of field: _CUVIDPROCPARAMS::raw_output_pitch"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, raw_output_pitch) - 48usize];
    ["Offset of field: _CUVIDPROCPARAMS::Reserved1"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, Reserved1) - 52usize];
    ["Offset of field: _CUVIDPROCPARAMS::output_stream"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, output_stream) - 56usize];
    ["Offset of field: _CUVIDPROCPARAMS::Reserved"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, Reserved) - 64usize];
    ["Offset of field: _CUVIDPROCPARAMS::histogram_dptr"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, histogram_dptr) - 248usize];
    ["Offset of field: _CUVIDPROCPARAMS::Reserved2"]
        [::core::mem::offset_of!(_CUVIDPROCPARAMS, Reserved2) - 256usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDGETDECODESTATUS"][::core::mem::size_of::<_CUVIDGETDECODESTATUS>() - 192usize];
    ["Alignment of _CUVIDGETDECODESTATUS"]
        [::core::mem::align_of::<_CUVIDGETDECODESTATUS>() - 8usize];
    ["Offset of field: _CUVIDGETDECODESTATUS::decodeStatus"]
        [::core::mem::offset_of!(_CUVIDGETDECODESTATUS, decodeStatus) - 0usize];
    ["Offset of field: _CUVIDGETDECODESTATUS::reserved"]
        [::core::mem::offset_of!(_CUVIDGETDECODESTATUS, reserved) - 4usize];
    ["Offset of field: _CUVIDGETDECODESTATUS::pReserved"]
        [::core::mem::offset_of!(_CUVIDGETDECODESTATUS, pReserved) - 128usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1"]
        [::core::mem::size_of::<_CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1>() - 8usize];
    ["Alignment of _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1"]
        [::core::mem::align_of::<_CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1>() - 2usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1::left"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1, left) - 0usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1::top"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1, top) - 2usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1::right"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1, right) - 4usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1::bottom"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO__bindgen_ty_1, bottom) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2"]
        [::core::mem::size_of::<_CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2>() - 8usize];
    ["Alignment of _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2"]
        [::core::mem::align_of::<_CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2>() - 2usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2::left"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2, left) - 0usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2::top"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2, top) - 2usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2::right"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2, right) - 4usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2::bottom"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO__bindgen_ty_2, bottom) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUVIDRECONFIGUREDECODERINFO"]
        [::core::mem::size_of::<_CUVIDRECONFIGUREDECODERINFO>() - 128usize];
    ["Alignment of _CUVIDRECONFIGUREDECODERINFO"]
        [::core::mem::align_of::<_CUVIDRECONFIGUREDECODERINFO>() - 4usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO::ulWidth"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO, ulWidth) - 0usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO::ulHeight"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO, ulHeight) - 4usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO::ulTargetWidth"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO, ulTargetWidth) - 8usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO::ulTargetHeight"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO, ulTargetHeight) - 12usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO::ulNumDecodeSurfaces"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO, ulNumDecodeSurfaces) - 16usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO::reserved1"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO, reserved1) - 20usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO::display_area"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO, display_area) - 68usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO::target_rect"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO, target_rect) - 76usize];
    ["Offset of field: _CUVIDRECONFIGUREDECODERINFO::reserved2"]
        [::core::mem::offset_of!(_CUVIDRECONFIGUREDECODERINFO, reserved2) - 84usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaVideoCodec_enum {
    cudaVideoCodec_MPEG1 = 0,
    cudaVideoCodec_MPEG2 = 1,
    cudaVideoCodec_MPEG4 = 2,
    cudaVideoCodec_VC1 = 3,
    cudaVideoCodec_H264 = 4,
    cudaVideoCodec_JPEG = 5,
    cudaVideoCodec_H264_SVC = 6,
    cudaVideoCodec_H264_MVC = 7,
    cudaVideoCodec_HEVC = 8,
    cudaVideoCodec_VP8 = 9,
    cudaVideoCodec_VP9 = 10,
    cudaVideoCodec_AV1 = 11,
    cudaVideoCodec_NumCodecs = 12,
    cudaVideoCodec_YUV420 = 1230591318,
    cudaVideoCodec_YV12 = 1498820914,
    cudaVideoCodec_NV12 = 1314271538,
    cudaVideoCodec_YUYV = 1498765654,
    cudaVideoCodec_UYVY = 1431918169,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaVideoSurfaceFormat_enum {
    cudaVideoSurfaceFormat_NV12 = 0,
    cudaVideoSurfaceFormat_P016 = 1,
    cudaVideoSurfaceFormat_YUV444 = 2,
    cudaVideoSurfaceFormat_YUV444_16Bit = 3,
    cudaVideoSurfaceFormat_NV16 = 4,
    cudaVideoSurfaceFormat_P216 = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaVideoDeinterlaceMode_enum {
    cudaVideoDeinterlaceMode_Weave = 0,
    cudaVideoDeinterlaceMode_Bob = 1,
    cudaVideoDeinterlaceMode_Adaptive = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaVideoChromaFormat_enum {
    cudaVideoChromaFormat_Monochrome = 0,
    cudaVideoChromaFormat_420 = 1,
    cudaVideoChromaFormat_422 = 2,
    cudaVideoChromaFormat_444 = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cudaVideoCreateFlags_enum {
    cudaVideoCreate_Default = 0,
    cudaVideoCreate_PreferCUDA = 1,
    cudaVideoCreate_PreferDXVA = 2,
    cudaVideoCreate_PreferCUVID = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum cuvidDecodeStatus_enum {
    cuvidDecodeStatus_Invalid = 0,
    cuvidDecodeStatus_InProgress = 1,
    cuvidDecodeStatus_Success = 2,
    cuvidDecodeStatus_Error = 8,
    cuvidDecodeStatus_Error_Concealed = 9,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CUVIDH264PICPARAMS__bindgen_ty_1 {
    pub slice_group_map_addr: ::core::ffi::c_ulonglong,
    pub pMb2SliceGroupMap: *const ::core::ffi::c_uchar,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CUVIDH264PICPARAMS__bindgen_ty_2 {
    pub mvcext: CUVIDH264MVCEXT,
    pub svcext: CUVIDH264SVCEXT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CUVIDVP8PICPARAMS__bindgen_ty_1 {
    pub vp8_frame_tag: _CUVIDVP8PICPARAMS__bindgen_ty_1__bindgen_ty_1,
    pub wFrameTagFlags: ::core::ffi::c_uchar,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CUVIDPICPARAMS__bindgen_ty_1 {
    pub mpeg2: CUVIDMPEG2PICPARAMS,
    pub h264: CUVIDH264PICPARAMS,
    pub vc1: CUVIDVC1PICPARAMS,
    pub mpeg4: CUVIDMPEG4PICPARAMS,
    pub jpeg: CUVIDJPEGPICPARAMS,
    pub hevc: CUVIDHEVCPICPARAMS,
    pub vp8: CUVIDVP8PICPARAMS,
    pub vp9: CUVIDVP9PICPARAMS,
    pub av1: CUVIDAV1PICPARAMS,
    pub CodecReserved: [::core::ffi::c_uint; 1024usize],
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
impl Default for _CUVIDDECODECAPS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _CUVIDDECODECREATEINFO {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _CUVIDH264SVCEXT {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _CUVIDH264PICPARAMS__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _CUVIDH264PICPARAMS__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _CUVIDH264PICPARAMS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl _CUVIDH264PICPARAMS {
    #[inline]
    pub fn mb_adaptive_frame_field_flag(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_mb_adaptive_frame_field_flag(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mb_adaptive_frame_field_flag_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mb_adaptive_frame_field_flag_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved1(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved1(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved1_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved1_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mb_adaptive_frame_field_flag: ::core::ffi::c_uint,
        Reserved1: ::core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let mb_adaptive_frame_field_flag: u32 =
                unsafe { ::core::mem::transmute(mb_adaptive_frame_field_flag) };
            mb_adaptive_frame_field_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let Reserved1: u32 = unsafe { ::core::mem::transmute(Reserved1) };
            Reserved1 as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for _CUVIDMPEG2PICPARAMS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _CUVIDMPEG4PICPARAMS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _CUVIDJPEGPICPARAMS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _CUVIDHEVCPICPARAMS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl _CUVIDVP8PICPARAMS__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn frame_type(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_frame_type(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_type_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_frame_type_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn version(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_version(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn version_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_version_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn show_frame(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_show_frame(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn show_frame_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_show_frame_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn update_mb_segmentation_data(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_update_mb_segmentation_data(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn update_mb_segmentation_data_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_update_mb_segmentation_data_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved2Bits(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_Reserved2Bits(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved2Bits_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved2Bits_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        frame_type: ::core::ffi::c_uchar,
        version: ::core::ffi::c_uchar,
        show_frame: ::core::ffi::c_uchar,
        update_mb_segmentation_data: ::core::ffi::c_uchar,
        Reserved2Bits: ::core::ffi::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let frame_type: u8 = unsafe { ::core::mem::transmute(frame_type) };
            frame_type as u64
        });
        __bindgen_bitfield_unit.set(1usize, 3u8, {
            let version: u8 = unsafe { ::core::mem::transmute(version) };
            version as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let show_frame: u8 = unsafe { ::core::mem::transmute(show_frame) };
            show_frame as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let update_mb_segmentation_data: u8 =
                unsafe { ::core::mem::transmute(update_mb_segmentation_data) };
            update_mb_segmentation_data as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let Reserved2Bits: u8 = unsafe { ::core::mem::transmute(Reserved2Bits) };
            Reserved2Bits as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for _CUVIDVP8PICPARAMS__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _CUVIDVP8PICPARAMS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl _CUVIDVP9PICPARAMS {
    #[inline]
    pub fn profile(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_profile(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn profile_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_profile_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frameContextIdx(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_frameContextIdx(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frameContextIdx_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_frameContextIdx_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frameType(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_frameType(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frameType_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_frameType_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn showFrame(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_showFrame(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn showFrame_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_showFrame_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn errorResilient(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_errorResilient(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn errorResilient_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_errorResilient_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frameParallelDecoding(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_frameParallelDecoding(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frameParallelDecoding_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_frameParallelDecoding_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn subSamplingX(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_subSamplingX(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn subSamplingX_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_subSamplingX_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn subSamplingY(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_subSamplingY(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn subSamplingY_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_subSamplingY_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn intraOnly(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_intraOnly(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn intraOnly_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_intraOnly_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_high_precision_mv(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_allow_high_precision_mv(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_high_precision_mv_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_allow_high_precision_mv_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn refreshEntropyProbs(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_refreshEntropyProbs(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn refreshEntropyProbs_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_refreshEntropyProbs_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved2Bits(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_reserved2Bits(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved2Bits_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_reserved2Bits_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        profile: ::core::ffi::c_ushort,
        frameContextIdx: ::core::ffi::c_ushort,
        frameType: ::core::ffi::c_ushort,
        showFrame: ::core::ffi::c_ushort,
        errorResilient: ::core::ffi::c_ushort,
        frameParallelDecoding: ::core::ffi::c_ushort,
        subSamplingX: ::core::ffi::c_ushort,
        subSamplingY: ::core::ffi::c_ushort,
        intraOnly: ::core::ffi::c_ushort,
        allow_high_precision_mv: ::core::ffi::c_ushort,
        refreshEntropyProbs: ::core::ffi::c_ushort,
        reserved2Bits: ::core::ffi::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let profile: u16 = unsafe { ::core::mem::transmute(profile) };
            profile as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let frameContextIdx: u16 = unsafe { ::core::mem::transmute(frameContextIdx) };
            frameContextIdx as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let frameType: u16 = unsafe { ::core::mem::transmute(frameType) };
            frameType as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let showFrame: u16 = unsafe { ::core::mem::transmute(showFrame) };
            showFrame as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let errorResilient: u16 = unsafe { ::core::mem::transmute(errorResilient) };
            errorResilient as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let frameParallelDecoding: u16 =
                unsafe { ::core::mem::transmute(frameParallelDecoding) };
            frameParallelDecoding as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let subSamplingX: u16 = unsafe { ::core::mem::transmute(subSamplingX) };
            subSamplingX as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let subSamplingY: u16 = unsafe { ::core::mem::transmute(subSamplingY) };
            subSamplingY as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let intraOnly: u16 = unsafe { ::core::mem::transmute(intraOnly) };
            intraOnly as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let allow_high_precision_mv: u16 =
                unsafe { ::core::mem::transmute(allow_high_precision_mv) };
            allow_high_precision_mv as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let refreshEntropyProbs: u16 = unsafe { ::core::mem::transmute(refreshEntropyProbs) };
            refreshEntropyProbs as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let reserved2Bits: u16 = unsafe { ::core::mem::transmute(reserved2Bits) };
            reserved2Bits as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn segmentEnabled(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_segmentEnabled(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentEnabled_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_segmentEnabled_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentMapUpdate(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_segmentMapUpdate(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentMapUpdate_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_segmentMapUpdate_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentMapTemporalUpdate(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_segmentMapTemporalUpdate(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentMapTemporalUpdate_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_segmentMapTemporalUpdate_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentFeatureMode(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_segmentFeatureMode(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentFeatureMode_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_segmentFeatureMode_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved4Bits(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_reserved4Bits(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved4Bits_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_reserved4Bits_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        segmentEnabled: ::core::ffi::c_uchar,
        segmentMapUpdate: ::core::ffi::c_uchar,
        segmentMapTemporalUpdate: ::core::ffi::c_uchar,
        segmentFeatureMode: ::core::ffi::c_uchar,
        reserved4Bits: ::core::ffi::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let segmentEnabled: u8 = unsafe { ::core::mem::transmute(segmentEnabled) };
            segmentEnabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let segmentMapUpdate: u8 = unsafe { ::core::mem::transmute(segmentMapUpdate) };
            segmentMapUpdate as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let segmentMapTemporalUpdate: u8 =
                unsafe { ::core::mem::transmute(segmentMapTemporalUpdate) };
            segmentMapTemporalUpdate as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let segmentFeatureMode: u8 = unsafe { ::core::mem::transmute(segmentFeatureMode) };
            segmentFeatureMode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let reserved4Bits: u8 = unsafe { ::core::mem::transmute(reserved4Bits) };
            reserved4Bits as u64
        });
        __bindgen_bitfield_unit
    }
}
impl _CUVIDAV1PICPARAMS__bindgen_ty_2 {
    #[inline]
    pub fn invalid(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_invalid(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn invalid_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_invalid_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn wmtype(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_wmtype(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn wmtype_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_wmtype_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved5Bits(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_reserved5Bits(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved5Bits_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                5u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_reserved5Bits_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        invalid: ::core::ffi::c_uchar,
        wmtype: ::core::ffi::c_uchar,
        reserved5Bits: ::core::ffi::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let invalid: u8 = unsafe { ::core::mem::transmute(invalid) };
            invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let wmtype: u8 = unsafe { ::core::mem::transmute(wmtype) };
            wmtype as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let reserved5Bits: u8 = unsafe { ::core::mem::transmute(reserved5Bits) };
            reserved5Bits as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for _CUVIDAV1PICPARAMS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl _CUVIDAV1PICPARAMS {
    #[inline]
    pub fn profile(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_profile(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn profile_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_profile_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_128x128_superblock(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_128x128_superblock(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_128x128_superblock_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_128x128_superblock_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn subsampling_x(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_subsampling_x(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn subsampling_x_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_subsampling_x_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn subsampling_y(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_subsampling_y(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn subsampling_y_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_subsampling_y_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mono_chrome(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mono_chrome(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mono_chrome_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mono_chrome_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bit_depth_minus8(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_bit_depth_minus8(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bit_depth_minus8_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bit_depth_minus8_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_filter_intra(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_filter_intra(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_filter_intra_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_filter_intra_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_intra_edge_filter(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_intra_edge_filter(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_intra_edge_filter_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_intra_edge_filter_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_interintra_compound(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_interintra_compound(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_interintra_compound_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_interintra_compound_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_masked_compound(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_masked_compound(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_masked_compound_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_masked_compound_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_dual_filter(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_dual_filter(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_dual_filter_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_dual_filter_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_order_hint(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_order_hint(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_order_hint_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_order_hint_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn order_hint_bits_minus1(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_order_hint_bits_minus1(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn order_hint_bits_minus1_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_order_hint_bits_minus1_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_jnt_comp(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_jnt_comp(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_jnt_comp_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_jnt_comp_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_superres(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_superres(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_superres_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_superres_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_cdef(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_cdef(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_cdef_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_cdef_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_restoration(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_restoration(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_restoration_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_restoration_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_fgs(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_fgs(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_fgs_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_fgs_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved0_7bits(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0_7bits(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved0_7bits_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                7u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved0_7bits_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_type(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_frame_type(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_type_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_type_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn show_frame(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_show_frame(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn show_frame_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                34usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_show_frame_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                34usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disable_cdf_update(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(35usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_cdf_update(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_cdf_update_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                35usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_cdf_update_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                35usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_screen_content_tools(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(36usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_screen_content_tools(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(36usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_screen_content_tools_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                36usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_screen_content_tools_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                36usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn force_integer_mv(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(37usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_integer_mv(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(37usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn force_integer_mv_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                37usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_force_integer_mv_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                37usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn coded_denom(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(38usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_coded_denom(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(38usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn coded_denom_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                38usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_coded_denom_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                38usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_intrabc(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(41usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_intrabc(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(41usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_intrabc_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                41usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_intrabc_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                41usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_high_precision_mv(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(42usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_high_precision_mv(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(42usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_high_precision_mv_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                42usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_high_precision_mv_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                42usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn interp_filter(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(43usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_interp_filter(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(43usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn interp_filter_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                43usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_interp_filter_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                43usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn switchable_motion_mode(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(46usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_switchable_motion_mode(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(46usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn switchable_motion_mode_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                46usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_switchable_motion_mode_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                46usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_ref_frame_mvs(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(47usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_ref_frame_mvs(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(47usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_ref_frame_mvs_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                47usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_ref_frame_mvs_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                47usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disable_frame_end_update_cdf(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(48usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_frame_end_update_cdf(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(48usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_frame_end_update_cdf_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_frame_end_update_cdf_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_q_present(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(49usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_q_present(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(49usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_q_present_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                49usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_q_present_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                49usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_q_res(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(50usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_delta_q_res(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(50usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_q_res_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                50usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_q_res_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                50usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn using_qmatrix(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(52usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_using_qmatrix(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(52usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn using_qmatrix_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                52usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_using_qmatrix_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                52usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn coded_lossless(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(53usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_coded_lossless(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(53usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn coded_lossless_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                53usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_coded_lossless_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                53usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_superres(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(54usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_superres(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(54usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_superres_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                54usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_superres_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                54usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tx_mode(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(55usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_tx_mode(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(55usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tx_mode_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                55usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tx_mode_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                55usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reference_mode(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(57usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reference_mode(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(57usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reference_mode_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                57usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reference_mode_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                57usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_warped_motion(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(58usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_warped_motion(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(58usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_warped_motion_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                58usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_warped_motion_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                58usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reduced_tx_set(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(59usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reduced_tx_set(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(59usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reduced_tx_set_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                59usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reduced_tx_set_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                59usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn skip_mode(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(60usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_mode(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(60usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn skip_mode_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                60usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_skip_mode_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                60usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved1_3bits(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(61usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1_3bits(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(61usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved1_3bits_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                61usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved1_3bits_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                61usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn num_tile_cols(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(64usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_num_tile_cols(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(64usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn num_tile_cols_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                64usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_num_tile_cols_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                64usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn num_tile_rows(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(72usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_num_tile_rows(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(72usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn num_tile_rows_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                72usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_num_tile_rows_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                72usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn context_update_tile_id(&self) -> ::core::ffi::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(80usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_context_update_tile_id(&mut self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(80usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn context_update_tile_id_raw(this: *const Self) -> ::core::ffi::c_uint {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 12usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                80usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_context_update_tile_id_raw(this: *mut Self, val: ::core::ffi::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 12usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                80usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        profile: ::core::ffi::c_uint,
        use_128x128_superblock: ::core::ffi::c_uint,
        subsampling_x: ::core::ffi::c_uint,
        subsampling_y: ::core::ffi::c_uint,
        mono_chrome: ::core::ffi::c_uint,
        bit_depth_minus8: ::core::ffi::c_uint,
        enable_filter_intra: ::core::ffi::c_uint,
        enable_intra_edge_filter: ::core::ffi::c_uint,
        enable_interintra_compound: ::core::ffi::c_uint,
        enable_masked_compound: ::core::ffi::c_uint,
        enable_dual_filter: ::core::ffi::c_uint,
        enable_order_hint: ::core::ffi::c_uint,
        order_hint_bits_minus1: ::core::ffi::c_uint,
        enable_jnt_comp: ::core::ffi::c_uint,
        enable_superres: ::core::ffi::c_uint,
        enable_cdef: ::core::ffi::c_uint,
        enable_restoration: ::core::ffi::c_uint,
        enable_fgs: ::core::ffi::c_uint,
        reserved0_7bits: ::core::ffi::c_uint,
        frame_type: ::core::ffi::c_uint,
        show_frame: ::core::ffi::c_uint,
        disable_cdf_update: ::core::ffi::c_uint,
        allow_screen_content_tools: ::core::ffi::c_uint,
        force_integer_mv: ::core::ffi::c_uint,
        coded_denom: ::core::ffi::c_uint,
        allow_intrabc: ::core::ffi::c_uint,
        allow_high_precision_mv: ::core::ffi::c_uint,
        interp_filter: ::core::ffi::c_uint,
        switchable_motion_mode: ::core::ffi::c_uint,
        use_ref_frame_mvs: ::core::ffi::c_uint,
        disable_frame_end_update_cdf: ::core::ffi::c_uint,
        delta_q_present: ::core::ffi::c_uint,
        delta_q_res: ::core::ffi::c_uint,
        using_qmatrix: ::core::ffi::c_uint,
        coded_lossless: ::core::ffi::c_uint,
        use_superres: ::core::ffi::c_uint,
        tx_mode: ::core::ffi::c_uint,
        reference_mode: ::core::ffi::c_uint,
        allow_warped_motion: ::core::ffi::c_uint,
        reduced_tx_set: ::core::ffi::c_uint,
        skip_mode: ::core::ffi::c_uint,
        reserved1_3bits: ::core::ffi::c_uint,
        num_tile_cols: ::core::ffi::c_uint,
        num_tile_rows: ::core::ffi::c_uint,
        context_update_tile_id: ::core::ffi::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 12usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 12usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let profile: u32 = unsafe { ::core::mem::transmute(profile) };
            profile as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let use_128x128_superblock: u32 =
                unsafe { ::core::mem::transmute(use_128x128_superblock) };
            use_128x128_superblock as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let subsampling_x: u32 = unsafe { ::core::mem::transmute(subsampling_x) };
            subsampling_x as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let subsampling_y: u32 = unsafe { ::core::mem::transmute(subsampling_y) };
            subsampling_y as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let mono_chrome: u32 = unsafe { ::core::mem::transmute(mono_chrome) };
            mono_chrome as u64
        });
        __bindgen_bitfield_unit.set(7usize, 4u8, {
            let bit_depth_minus8: u32 = unsafe { ::core::mem::transmute(bit_depth_minus8) };
            bit_depth_minus8 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let enable_filter_intra: u32 = unsafe { ::core::mem::transmute(enable_filter_intra) };
            enable_filter_intra as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let enable_intra_edge_filter: u32 =
                unsafe { ::core::mem::transmute(enable_intra_edge_filter) };
            enable_intra_edge_filter as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let enable_interintra_compound: u32 =
                unsafe { ::core::mem::transmute(enable_interintra_compound) };
            enable_interintra_compound as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let enable_masked_compound: u32 =
                unsafe { ::core::mem::transmute(enable_masked_compound) };
            enable_masked_compound as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let enable_dual_filter: u32 = unsafe { ::core::mem::transmute(enable_dual_filter) };
            enable_dual_filter as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let enable_order_hint: u32 = unsafe { ::core::mem::transmute(enable_order_hint) };
            enable_order_hint as u64
        });
        __bindgen_bitfield_unit.set(17usize, 3u8, {
            let order_hint_bits_minus1: u32 =
                unsafe { ::core::mem::transmute(order_hint_bits_minus1) };
            order_hint_bits_minus1 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let enable_jnt_comp: u32 = unsafe { ::core::mem::transmute(enable_jnt_comp) };
            enable_jnt_comp as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let enable_superres: u32 = unsafe { ::core::mem::transmute(enable_superres) };
            enable_superres as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let enable_cdef: u32 = unsafe { ::core::mem::transmute(enable_cdef) };
            enable_cdef as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let enable_restoration: u32 = unsafe { ::core::mem::transmute(enable_restoration) };
            enable_restoration as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let enable_fgs: u32 = unsafe { ::core::mem::transmute(enable_fgs) };
            enable_fgs as u64
        });
        __bindgen_bitfield_unit.set(25usize, 7u8, {
            let reserved0_7bits: u32 = unsafe { ::core::mem::transmute(reserved0_7bits) };
            reserved0_7bits as u64
        });
        __bindgen_bitfield_unit.set(32usize, 2u8, {
            let frame_type: u32 = unsafe { ::core::mem::transmute(frame_type) };
            frame_type as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let show_frame: u32 = unsafe { ::core::mem::transmute(show_frame) };
            show_frame as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let disable_cdf_update: u32 = unsafe { ::core::mem::transmute(disable_cdf_update) };
            disable_cdf_update as u64
        });
        __bindgen_bitfield_unit.set(36usize, 1u8, {
            let allow_screen_content_tools: u32 =
                unsafe { ::core::mem::transmute(allow_screen_content_tools) };
            allow_screen_content_tools as u64
        });
        __bindgen_bitfield_unit.set(37usize, 1u8, {
            let force_integer_mv: u32 = unsafe { ::core::mem::transmute(force_integer_mv) };
            force_integer_mv as u64
        });
        __bindgen_bitfield_unit.set(38usize, 3u8, {
            let coded_denom: u32 = unsafe { ::core::mem::transmute(coded_denom) };
            coded_denom as u64
        });
        __bindgen_bitfield_unit.set(41usize, 1u8, {
            let allow_intrabc: u32 = unsafe { ::core::mem::transmute(allow_intrabc) };
            allow_intrabc as u64
        });
        __bindgen_bitfield_unit.set(42usize, 1u8, {
            let allow_high_precision_mv: u32 =
                unsafe { ::core::mem::transmute(allow_high_precision_mv) };
            allow_high_precision_mv as u64
        });
        __bindgen_bitfield_unit.set(43usize, 3u8, {
            let interp_filter: u32 = unsafe { ::core::mem::transmute(interp_filter) };
            interp_filter as u64
        });
        __bindgen_bitfield_unit.set(46usize, 1u8, {
            let switchable_motion_mode: u32 =
                unsafe { ::core::mem::transmute(switchable_motion_mode) };
            switchable_motion_mode as u64
        });
        __bindgen_bitfield_unit.set(47usize, 1u8, {
            let use_ref_frame_mvs: u32 = unsafe { ::core::mem::transmute(use_ref_frame_mvs) };
            use_ref_frame_mvs as u64
        });
        __bindgen_bitfield_unit.set(48usize, 1u8, {
            let disable_frame_end_update_cdf: u32 =
                unsafe { ::core::mem::transmute(disable_frame_end_update_cdf) };
            disable_frame_end_update_cdf as u64
        });
        __bindgen_bitfield_unit.set(49usize, 1u8, {
            let delta_q_present: u32 = unsafe { ::core::mem::transmute(delta_q_present) };
            delta_q_present as u64
        });
        __bindgen_bitfield_unit.set(50usize, 2u8, {
            let delta_q_res: u32 = unsafe { ::core::mem::transmute(delta_q_res) };
            delta_q_res as u64
        });
        __bindgen_bitfield_unit.set(52usize, 1u8, {
            let using_qmatrix: u32 = unsafe { ::core::mem::transmute(using_qmatrix) };
            using_qmatrix as u64
        });
        __bindgen_bitfield_unit.set(53usize, 1u8, {
            let coded_lossless: u32 = unsafe { ::core::mem::transmute(coded_lossless) };
            coded_lossless as u64
        });
        __bindgen_bitfield_unit.set(54usize, 1u8, {
            let use_superres: u32 = unsafe { ::core::mem::transmute(use_superres) };
            use_superres as u64
        });
        __bindgen_bitfield_unit.set(55usize, 2u8, {
            let tx_mode: u32 = unsafe { ::core::mem::transmute(tx_mode) };
            tx_mode as u64
        });
        __bindgen_bitfield_unit.set(57usize, 1u8, {
            let reference_mode: u32 = unsafe { ::core::mem::transmute(reference_mode) };
            reference_mode as u64
        });
        __bindgen_bitfield_unit.set(58usize, 1u8, {
            let allow_warped_motion: u32 = unsafe { ::core::mem::transmute(allow_warped_motion) };
            allow_warped_motion as u64
        });
        __bindgen_bitfield_unit.set(59usize, 1u8, {
            let reduced_tx_set: u32 = unsafe { ::core::mem::transmute(reduced_tx_set) };
            reduced_tx_set as u64
        });
        __bindgen_bitfield_unit.set(60usize, 1u8, {
            let skip_mode: u32 = unsafe { ::core::mem::transmute(skip_mode) };
            skip_mode as u64
        });
        __bindgen_bitfield_unit.set(61usize, 3u8, {
            let reserved1_3bits: u32 = unsafe { ::core::mem::transmute(reserved1_3bits) };
            reserved1_3bits as u64
        });
        __bindgen_bitfield_unit.set(64usize, 8u8, {
            let num_tile_cols: u32 = unsafe { ::core::mem::transmute(num_tile_cols) };
            num_tile_cols as u64
        });
        __bindgen_bitfield_unit.set(72usize, 8u8, {
            let num_tile_rows: u32 = unsafe { ::core::mem::transmute(num_tile_rows) };
            num_tile_rows as u64
        });
        __bindgen_bitfield_unit.set(80usize, 16u8, {
            let context_update_tile_id: u32 =
                unsafe { ::core::mem::transmute(context_update_tile_id) };
            context_update_tile_id as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn cdef_damping_minus_3(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_cdef_damping_minus_3(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cdef_damping_minus_3_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                0usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_cdef_damping_minus_3_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cdef_bits(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_cdef_bits(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cdef_bits_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                2usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_cdef_bits_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved2_4bits(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_2.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_reserved2_4bits(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_2.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved2_4bits_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_2),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_reserved2_4bits_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_2),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        cdef_damping_minus_3: ::core::ffi::c_uchar,
        cdef_bits: ::core::ffi::c_uchar,
        reserved2_4bits: ::core::ffi::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let cdef_damping_minus_3: u8 = unsafe { ::core::mem::transmute(cdef_damping_minus_3) };
            cdef_damping_minus_3 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let cdef_bits: u8 = unsafe { ::core::mem::transmute(cdef_bits) };
            cdef_bits as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let reserved2_4bits: u8 = unsafe { ::core::mem::transmute(reserved2_4bits) };
            reserved2_4bits as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn SkipModeFrame0(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_SkipModeFrame0(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SkipModeFrame0_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SkipModeFrame0_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SkipModeFrame1(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_3.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_SkipModeFrame1(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_3.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SkipModeFrame1_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_3),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_SkipModeFrame1_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_3),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_3(
        SkipModeFrame0: ::core::ffi::c_uchar,
        SkipModeFrame1: ::core::ffi::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let SkipModeFrame0: u8 = unsafe { ::core::mem::transmute(SkipModeFrame0) };
            SkipModeFrame0 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let SkipModeFrame1: u8 = unsafe { ::core::mem::transmute(SkipModeFrame1) };
            SkipModeFrame1 as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn segmentation_enabled(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_4.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_enabled_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_enabled_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_update_map(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_segmentation_update_map(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_4.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_update_map_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_update_map_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_update_data(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_segmentation_update_data(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_4.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_update_data_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_update_data_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_temporal_update(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_segmentation_temporal_update(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_4.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_temporal_update_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_temporal_update_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved3_4bits(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_4.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_reserved3_4bits(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_4.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved3_4bits_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_4),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_reserved3_4bits_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_4),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_4(
        segmentation_enabled: ::core::ffi::c_uchar,
        segmentation_update_map: ::core::ffi::c_uchar,
        segmentation_update_data: ::core::ffi::c_uchar,
        segmentation_temporal_update: ::core::ffi::c_uchar,
        reserved3_4bits: ::core::ffi::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let segmentation_enabled: u8 = unsafe { ::core::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let segmentation_update_map: u8 =
                unsafe { ::core::mem::transmute(segmentation_update_map) };
            segmentation_update_map as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let segmentation_update_data: u8 =
                unsafe { ::core::mem::transmute(segmentation_update_data) };
            segmentation_update_data as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let segmentation_temporal_update: u8 =
                unsafe { ::core::mem::transmute(segmentation_temporal_update) };
            segmentation_temporal_update as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let reserved3_4bits: u8 = unsafe { ::core::mem::transmute(reserved3_4bits) };
            reserved3_4bits as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn loop_filter_delta_enabled(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_5.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_loop_filter_delta_enabled(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_5.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn loop_filter_delta_enabled_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_5),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_loop_filter_delta_enabled_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_5),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn loop_filter_delta_update(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_5.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_loop_filter_delta_update(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_5.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn loop_filter_delta_update_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_5),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_loop_filter_delta_update_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_5),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_lf_present(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_5.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_delta_lf_present(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_5.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_lf_present_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_5),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_delta_lf_present_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_5),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_lf_res(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_5.get(3usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_delta_lf_res(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_5.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_lf_res_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_5),
                3usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_delta_lf_res_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_5),
                3usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_lf_multi(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_5.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_delta_lf_multi(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_5.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_lf_multi_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_5),
                5usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_delta_lf_multi_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_5),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved4_2bits(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_5.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_reserved4_2bits(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_5.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved4_2bits_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_5),
                6usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_reserved4_2bits_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_5),
                6usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_5(
        loop_filter_delta_enabled: ::core::ffi::c_uchar,
        loop_filter_delta_update: ::core::ffi::c_uchar,
        delta_lf_present: ::core::ffi::c_uchar,
        delta_lf_res: ::core::ffi::c_uchar,
        delta_lf_multi: ::core::ffi::c_uchar,
        reserved4_2bits: ::core::ffi::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let loop_filter_delta_enabled: u8 =
                unsafe { ::core::mem::transmute(loop_filter_delta_enabled) };
            loop_filter_delta_enabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let loop_filter_delta_update: u8 =
                unsafe { ::core::mem::transmute(loop_filter_delta_update) };
            loop_filter_delta_update as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let delta_lf_present: u8 = unsafe { ::core::mem::transmute(delta_lf_present) };
            delta_lf_present as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let delta_lf_res: u8 = unsafe { ::core::mem::transmute(delta_lf_res) };
            delta_lf_res as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let delta_lf_multi: u8 = unsafe { ::core::mem::transmute(delta_lf_multi) };
            delta_lf_multi as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let reserved4_2bits: u8 = unsafe { ::core::mem::transmute(reserved4_2bits) };
            reserved4_2bits as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn temporal_layer_id(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_6.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_temporal_layer_id(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_6.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn temporal_layer_id_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_6),
                0usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_temporal_layer_id_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_6),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn spatial_layer_id(&self) -> ::core::ffi::c_uchar {
        unsafe { ::core::mem::transmute(self._bitfield_6.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_spatial_layer_id(&mut self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_6.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn spatial_layer_id_raw(this: *const Self) -> ::core::ffi::c_uchar {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_6),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_spatial_layer_id_raw(this: *mut Self, val: ::core::ffi::c_uchar) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_6),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_6(
        temporal_layer_id: ::core::ffi::c_uchar,
        spatial_layer_id: ::core::ffi::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let temporal_layer_id: u8 = unsafe { ::core::mem::transmute(temporal_layer_id) };
            temporal_layer_id as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let spatial_layer_id: u8 = unsafe { ::core::mem::transmute(spatial_layer_id) };
            spatial_layer_id as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn apply_grain(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_7.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_apply_grain(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_7.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn apply_grain_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_7),
                0usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_apply_grain_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_7),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn overlap_flag(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_7.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_overlap_flag(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_7.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn overlap_flag_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_7),
                1usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_overlap_flag_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_7),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn scaling_shift_minus8(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_7.get(2usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_scaling_shift_minus8(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_7.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn scaling_shift_minus8_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_7),
                2usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_scaling_shift_minus8_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_7),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn chroma_scaling_from_luma(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_7.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_chroma_scaling_from_luma(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_7.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn chroma_scaling_from_luma_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_7),
                4usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_chroma_scaling_from_luma_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_7),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ar_coeff_lag(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_7.get(5usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_ar_coeff_lag(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_7.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ar_coeff_lag_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_7),
                5usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_ar_coeff_lag_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_7),
                5usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ar_coeff_shift_minus6(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_7.get(7usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_ar_coeff_shift_minus6(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_7.set(7usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ar_coeff_shift_minus6_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_7),
                7usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_ar_coeff_shift_minus6_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_7),
                7usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn grain_scale_shift(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_7.get(9usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_grain_scale_shift(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_7.set(9usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn grain_scale_shift_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_7),
                9usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_grain_scale_shift_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_7),
                9usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn clip_to_restricted_range(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_7.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_clip_to_restricted_range(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_7.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn clip_to_restricted_range_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_7),
                11usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_clip_to_restricted_range_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_7),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved6_4bits(&self) -> ::core::ffi::c_ushort {
        unsafe { ::core::mem::transmute(self._bitfield_7.get(12usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_reserved6_4bits(&mut self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_7.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved6_4bits_raw(this: *const Self) -> ::core::ffi::c_ushort {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_7),
                12usize,
                4u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_reserved6_4bits_raw(this: *mut Self, val: ::core::ffi::c_ushort) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_7),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_7(
        apply_grain: ::core::ffi::c_ushort,
        overlap_flag: ::core::ffi::c_ushort,
        scaling_shift_minus8: ::core::ffi::c_ushort,
        chroma_scaling_from_luma: ::core::ffi::c_ushort,
        ar_coeff_lag: ::core::ffi::c_ushort,
        ar_coeff_shift_minus6: ::core::ffi::c_ushort,
        grain_scale_shift: ::core::ffi::c_ushort,
        clip_to_restricted_range: ::core::ffi::c_ushort,
        reserved6_4bits: ::core::ffi::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let apply_grain: u16 = unsafe { ::core::mem::transmute(apply_grain) };
            apply_grain as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let overlap_flag: u16 = unsafe { ::core::mem::transmute(overlap_flag) };
            overlap_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let scaling_shift_minus8: u16 = unsafe { ::core::mem::transmute(scaling_shift_minus8) };
            scaling_shift_minus8 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let chroma_scaling_from_luma: u16 =
                unsafe { ::core::mem::transmute(chroma_scaling_from_luma) };
            chroma_scaling_from_luma as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let ar_coeff_lag: u16 = unsafe { ::core::mem::transmute(ar_coeff_lag) };
            ar_coeff_lag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 2u8, {
            let ar_coeff_shift_minus6: u16 =
                unsafe { ::core::mem::transmute(ar_coeff_shift_minus6) };
            ar_coeff_shift_minus6 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 2u8, {
            let grain_scale_shift: u16 = unsafe { ::core::mem::transmute(grain_scale_shift) };
            grain_scale_shift as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let clip_to_restricted_range: u16 =
                unsafe { ::core::mem::transmute(clip_to_restricted_range) };
            clip_to_restricted_range as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let reserved6_4bits: u16 = unsafe { ::core::mem::transmute(reserved6_4bits) };
            reserved6_4bits as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for _CUVIDPICPARAMS__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _CUVIDPICPARAMS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _CUVIDPROCPARAMS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for _CUVIDGETDECODESTATUS {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::cudaVideoChromaFormat_enum as cudaVideoChromaFormat;
pub use self::cudaVideoCodec_enum as cudaVideoCodec;
pub use self::cudaVideoCreateFlags_enum as cudaVideoCreateFlags;
pub use self::cudaVideoDeinterlaceMode_enum as cudaVideoDeinterlaceMode;
pub use self::cudaVideoSurfaceFormat_enum as cudaVideoSurfaceFormat;
pub use self::cuvidDecodeStatus_enum as cuvidDecodeStatus;
unsafe extern "C" {
    #[must_use]
    pub fn cuvidGetDecoderCaps(pdc: *mut CUVIDDECODECAPS) -> CUresult;
    #[must_use]
    pub fn cuvidCreateDecoder(
        phDecoder: *mut CUvideodecoder,
        pdci: *mut CUVIDDECODECREATEINFO,
    ) -> CUresult;
    #[must_use]
    pub fn cuvidDestroyDecoder(hDecoder: CUvideodecoder) -> CUresult;
    #[must_use]
    pub fn cuvidDecodePicture(
        hDecoder: CUvideodecoder,
        pPicParams: *mut CUVIDPICPARAMS,
    ) -> CUresult;
    #[must_use]
    pub fn cuvidGetDecodeStatus(
        hDecoder: CUvideodecoder,
        nPicIdx: ::core::ffi::c_int,
        pDecodeStatus: *mut CUVIDGETDECODESTATUS,
    ) -> CUresult;
    #[must_use]
    pub fn cuvidReconfigureDecoder(
        hDecoder: CUvideodecoder,
        pDecReconfigParams: *mut CUVIDRECONFIGUREDECODERINFO,
    ) -> CUresult;
    #[must_use]
    pub fn cuvidMapVideoFrame64(
        hDecoder: CUvideodecoder,
        nPicIdx: ::core::ffi::c_int,
        pDevPtr: *mut ::core::ffi::c_ulonglong,
        pPitch: *mut ::core::ffi::c_uint,
        pVPP: *mut CUVIDPROCPARAMS,
    ) -> CUresult;
    #[must_use]
    pub fn cuvidUnmapVideoFrame64(
        hDecoder: CUvideodecoder,
        DevPtr: ::core::ffi::c_ulonglong,
    ) -> CUresult;
    #[must_use]
    pub fn cuvidCtxLockCreate(pLock: *mut CUvideoctxlock, ctx: CUcontext) -> CUresult;
    #[must_use]
    pub fn cuvidCtxLockDestroy(lck: CUvideoctxlock) -> CUresult;
    #[must_use]
    pub fn cuvidCtxLock(lck: CUvideoctxlock, reserved_flags: ::core::ffi::c_uint) -> CUresult;
    #[must_use]
    pub fn cuvidCtxUnlock(lck: CUvideoctxlock, reserved_flags: ::core::ffi::c_uint) -> CUresult;
}
